{
  "address": "0xD3064e41A11af45ab6e1C1A50DA28C76908E78C6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chargingPointIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes3",
          "name": "bookingSlot",
          "type": "bytes3"
        }
      ],
      "name": "BookingSubmited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        }
      ],
      "name": "ChargingPointAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "charginPointIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        }
      ],
      "name": "ConnectorDesactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "providerAddr",
          "type": "address"
        }
      ],
      "name": "ProviderJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chargingPointId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "StationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "UserJoined",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ChargingPointIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ChargingPointToStation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "StationCounterInChargingPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "addAcceptedPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pricePerHour",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nConnectors",
          "type": "uint256"
        }
      ],
      "name": "addChargingPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chargingPointId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "internalType": "bytes3",
          "name": "time",
          "type": "bytes3"
        },
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "bookStation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bookingIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chargingPointIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        }
      ],
      "name": "desactivateConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chargingPointID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "connectorID",
          "type": "uint256"
        }
      ],
      "name": "getConnector",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pricePerHour",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes3[8]",
              "name": "availability",
              "type": "bytes3[8]"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Station",
          "name": "station",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pricePerHour",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes3[8]",
              "name": "availability",
              "type": "bytes3[8]"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Station",
          "name": "station",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAcceptedPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinAsProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinAsUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stationIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "station_time_lower_bound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stationsMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pricePerHour",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd92e766f88ddbbcf00d440959929f7d08d5469bb150924afbaaa99fc79892ae1",
  "receipt": {
    "to": null,
    "from": "0x4bdB8234AD81F26985d257F36a2d2d8c30365546",
    "contractAddress": "0xD3064e41A11af45ab6e1C1A50DA28C76908E78C6",
    "transactionIndex": 90,
    "gasUsed": "1666265",
    "logsBloom": "0x
    "blockHash": "0xc521d8b44ca42fef06d28f96c3a9f75478a09ba5f258ba3f445b2b9640d423ad",
    "transactionHash": "0xd92e766f88ddbbcf00d440959929f7d08d5469bb150924afbaaa99fc79892ae1",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 28521208,
        "transactionHash": "0xd92e766f88ddbbcf00d440959929f7d08d5469bb150924afbaaa99fc79892ae1",
        "address": "0xD3064e41A11af45ab6e1C1A50DA28C76908E78C6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546"
        ],
        "data": "0x",
        "logIndex": 434,
        "blockHash": "0xc521d8b44ca42fef06d28f96c3a9f75478a09ba5f258ba3f445b2b9640d423ad"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 28521208,
        "transactionHash": "0xd92e766f88ddbbcf00d440959929f7d08d5469bb150924afbaaa99fc79892ae1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000153ba90f407c9e00000000000000000000000000000000000000000000000009ca7bdb100e6a4b00000000000000000000000000000000000000000000163be09e99ef0ae83c8d00000000000000000000000000000000000000000000000009b5403200cdedad00000000000000000000000000000000000000000000163be0b3d5981a28b92b",
        "logIndex": 435,
        "blockHash": "0xc521d8b44ca42fef06d28f96c3a9f75478a09ba5f258ba3f445b2b9640d423ad"
      }
    ],
    "blockNumber": 28521208,
    "cumulativeGasUsed": "16610457",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a75b4d3fd65c03c437e0f704b915ec45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chargingPointIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes3\",\"name\":\"bookingSlot\",\"type\":\"bytes3\"}],\"name\":\"BookingSubmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"ChargingPointAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"charginPointIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"}],\"name\":\"ConnectorDesactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"providerAddr\",\"type\":\"address\"}],\"name\":\"ProviderJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chargingPointId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"StationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"UserJoined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ChargingPointIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ChargingPointToStation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StationCounterInChargingPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"addAcceptedPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nConnectors\",\"type\":\"uint256\"}],\"name\":\"addChargingPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chargingPointId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"bytes3\",\"name\":\"time\",\"type\":\"bytes3\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"bookStation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookingIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chargingPointIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"}],\"name\":\"desactivateConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chargingPointID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"connectorID\",\"type\":\"uint256\"}],\"name\":\"getConnector\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes3[8]\",\"name\":\"availability\",\"type\":\"bytes3[8]\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct Station\",\"name\":\"station\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes3[8]\",\"name\":\"availability\",\"type\":\"bytes3[8]\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct Station\",\"name\":\"station\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAcceptedPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinAsProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinAsUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stationIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"station_time_lower_bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stationsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bookStation(uint256,uint256,uint256,bytes3,address)\":{\"details\":\"** @note   index : index of the station ( starts from 1 day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed time : pass in bytes 24 slots ( hrs ) i.e: 0010 0001 0000 0000 => we book for hours 3 and 8 parse into hex : 0x2100 => this is the input tokenAddr : token which is used to perform the transaction , must be an approved token*\"},\"getBlockTimestamp()\":{\"details\":\"dummy call for usage in the testing*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JomEV.sol\":\"JomEV\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/JomEV.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nstruct Station {\\n    uint256 pricePerHour;\\n    string location;\\n    address owner;\\n    bytes3[8] availability;\\n    bool isActive;\\n}\\n\\ncontract JomEV is Ownable{\\n\\n    using Counters for Counters.Counter; \\n    using SafeMath for uint256;\\n\\n    event UserJoined(address userAddr);\\n    event ProviderJoined(address providerAddr);\\n    event BookingSubmited( uint256 chargingPointIndex,uint256 connectorIndex, uint256 fee, uint256 day, bytes3 bookingSlot);\\n    event StationAdded(uint256 chargingPointId, uint256 connectorIndex, uint256 index, string cid, uint256 price);\\n    event ChargingPointAdded(uint256 index, string cid, uint256 price, uint256 amountStaked);\\n    event ConnectorDesactivated(uint256 charginPointIndex, uint256 connectorIndex);\\n\\n    mapping(address => bool) public isMember;\\n    mapping(address => bool) public isProvider;\\n    mapping(uint256 => Station) public stationsMap;\\n    mapping(uint256 => uint256) public station_time_lower_bound;\\n    mapping(address => mapping (address => uint256)) public stakes;\\n    mapping (address => bool) public isAcceptedPayment;\\n    mapping(uint256 => mapping(uint256 => uint256)) public ChargingPointToStation;\\n    mapping(uint256 => uint256) public StationCounterInChargingPoint;\\n\\n    uint256 private TIMESTAMP_PER_DAY = 86400;\\n    uint256 internal contract_time_lower_bound;\\n    Counters.Counter public stationIDs;\\n    Counters.Counter public bookingIDs;\\n    Counters.Counter public ChargingPointIDs;\\n    constructor () {\\n        contract_time_lower_bound = block.timestamp;\\n    }\\n    modifier onlyUser() {\\n        require(isMember[msg.sender], \\\"This Feature is only for users\\\");\\n        _;\\n    }\\n    modifier onlyProvider() {\\n        require(isProvider[msg.sender], \\\"To become a provider you need to be a user of JomEV\\\");\\n        _;\\n    }\\n\\n    //dummy function for now, we will use worldcoin to upgrade this\\n    function joinAsUser() external {\\n        //worldcoin verification\\n        isMember[msg.sender] = true;\\n        emit UserJoined(msg.sender);\\n    } \\n    function joinAsProvider() external onlyUser {\\n        isProvider[msg.sender] = true;\\n        emit ProviderJoined(msg.sender);\\n    }\\n    function addChargingPoint ( uint256 _pricePerHour, string calldata cid, address tokenAddr, uint256 nConnectors) external onlyProvider {\\n        require(isAcceptedPayment[tokenAddr],\\\"this token is not allowed\\\");\\n        uint256 amountToTransfer = _pricePerHour.mul(24).mul(7).mul(nConnectors);\\n        IERC20(tokenAddr).transferFrom(msg.sender, address(this),amountToTransfer);\\n        stakes[tokenAddr][msg.sender] += amountToTransfer;\\n\\n        ChargingPointIDs.increment();\\n        uint256 currChargingPointCount = ChargingPointIDs.current();\\n        for(uint256 i=0; i<nConnectors ; i++){\\n            _addStation(_pricePerHour, cid, currChargingPointCount);\\n        }\\n        emit ChargingPointAdded(stationIDs.current(), cid, _pricePerHour, amountToTransfer);\\n    }\\n    /**\\n    ** @dev \\n    ** @note  \\n        pricePerHour : price x hour of current station\\n        location : must be passed in coordinates or other relevant way\\n        tokenAddr : token which is used to perform the transaction , must be an approved token\\n    **/\\n    function _addStation(uint256 _pricePerHour, string calldata location, uint256 chargingPointId) internal  {\\n        stationIDs.increment();\\n        Station memory newStation = Station(_pricePerHour, location, msg.sender, [\\n            bytes3(0),bytes3(0),bytes3(0),bytes3(0),bytes3(0),bytes3(0),bytes3(0),bytes3(0)\\n        ],true);\\n        station_time_lower_bound[stationIDs.current()] = contract_time_lower_bound;\\n        stationsMap[stationIDs.current()] = newStation;\\n        StationCounterInChargingPoint[chargingPointId]++;\\n        ChargingPointToStation[chargingPointId][StationCounterInChargingPoint[chargingPointId]] = stationIDs.current();\\n        emit StationAdded(chargingPointId, StationCounterInChargingPoint[chargingPointId], stationIDs.current(), location, _pricePerHour);\\n    }\\n    /**\\n    ** @dev \\n    ** @note  \\n        index : index of the station ( starts from 1\\n        day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed\\n        time : pass in bytes 24 slots ( hrs )\\n                i.e: 0010 0001 0000 0000 => we book for hours 3 and 8\\n                parse into hex : 0x2100 => this is the input\\n        tokenAddr : token which is used to perform the transaction , must be an approved token\\n\\n    **/\\n    function bookStation(uint256 chargingPointId, uint256 connectorIndex, uint256 day, bytes3 time, address tokenAddr) external  onlyUser{\\n\\n        bookingIDs.increment();\\n        uint256 index = ChargingPointToStation[chargingPointId][connectorIndex];\\n        require (index <= stationIDs.current() && index > 0,\\\"index for booking not allowed\\\");\\n        require (time != bytes3(0) , \\\"new schedule cannot be empty\\\");\\n        Station memory selectedStation = stationsMap[index];\\n        require(selectedStation.isActive,\\\"Current Station is not active\\\");\\n\\n        //perform payment\\n        uint256 amountRequired = selectedStation.pricePerHour;\\n        require(isAcceptedPayment[tokenAddr],\\\"this token is not accepted\\\");\\n        IERC20(tokenAddr).transferFrom(msg.sender, address(this) , amountRequired);\\n\\n        uint256 startPointer = day;\\n        uint256 diff = block.timestamp - station_time_lower_bound[index];\\n        if( diff > TIMESTAMP_PER_DAY){\\n            uint256 quotient = (diff).div(TIMESTAMP_PER_DAY);\\n            uint256 n = quotient;\\n            if(quotient>=7){\\n                n = 7;\\n                station_time_lower_bound[index]+=(TIMESTAMP_PER_DAY*(quotient.div(7)));\\n            }\\n            for ( uint8 i = 1 ; i <= n ; i++){\\n                startPointer+=1;\\n                selectedStation.availability[i] = bytes3(0);\\n            }\\n        }\\n        startPointer = startPointer % 7;\\n        bytes3 checkOverlap = time & selectedStation.availability[startPointer];\\n        require(checkOverlap == bytes3(0) , \\\"new schedule overlaps\\\");\\n        selectedStation.availability[startPointer] = time | selectedStation.availability[startPointer];\\n        stationsMap[index] = selectedStation;\\n\\n        emit BookingSubmited(chargingPointId,connectorIndex,amountRequired, startPointer, time);\\n    }\\n\\n    function desactivateConnector(uint256 chargingPointIndex, uint256 connectorIndex) external onlyProvider {\\n        require(stationsMap[ChargingPointToStation[chargingPointIndex][connectorIndex]].owner == msg.sender , \\\"Caller is not the owner of the station\\\");\\n        stationsMap[ChargingPointToStation[chargingPointIndex][connectorIndex]].isActive = false;\\n        \\n        emit ConnectorDesactivated(chargingPointIndex, connectorIndex);\\n    }\\n    function addAcceptedPayment(address tokenAddr) external onlyOwner {\\n        isAcceptedPayment[tokenAddr]= true;\\n    }\\n    //readers\\n    function getStation(uint256 index) external view returns(Station memory station){\\n        return (stationsMap[index]);\\n    }\\n\\n    function getConnector(uint256 chargingPointID , uint256 connectorID) external view returns (Station memory station){\\n        return (stationsMap[ChargingPointToStation[chargingPointID][connectorID]]);\\n    }\\n\\n    /** \\n    **  @dev dummy call for usage in the testing\\n    **/\\n    function getBlockTimestamp() external view returns(uint256) {\\n        return(block.timestamp);\\n    }\\n}\",\"keccak256\":\"0xeeec20c4a148ff8332e1bf82fc468bed6c56a53ea40bda0203c5f90278a26a5e\"}},\"version\":1}",
  "bytecode": "0x60806040526201518060095534801561001757600080fd5b506100213361002a565b42600a5561007a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611bec806100896000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806394ba53dc116100c3578063a4e47b661161007c578063a4e47b6614610303578063b869813f1461032e578063dad03ec01461034e578063e32819c514610358578063e569e5a61461036b578063f2fde38b1461037357600080fd5b806394ba53dc146102645780639590a542146102775780639ab304261461027f5780639f50da31146102aa578063a1403ec9146102cd578063a230c524146102e057600080fd5b806365a6ec7e1161011557806365a6ec7e146101c55780636b074a07146101e5578063715018a614610218578063796b89b9146102205780638da5cb5b14610226578063903dfb601461024157600080fd5b8063106e054d146101525780631e5c502e1461017b5780632d318a9914610193578063449efb25146101a65780634c428def146101bb575b600080fd5b610165610160366004611753565b610386565b6040516101729190611975565b60405180910390f35b600b546101859081565b604051908152602001610172565b6101656101a13660046117fb565b6104d5565b6101b96101b43660046117fb565b610632565b005b600c546101859081565b6101856101d3366004611753565b60086020526000908152604090205481565b6102086101f33660046116e7565b60026020526000908152604090205460ff1681565b6040519015158152602001610172565b6101b9610760565b42610185565b6000546040516001600160a01b039091168152602001610172565b61025461024f366004611753565b610796565b6040516101729493929190611a2b565b6101b961027236600461181c565b610854565b6101b9610ee9565b61018561028d3660046117fb565b600760209081526000928352604080842090915290825290205481565b6102086102b83660046116e7565b60066020526000908152604090205460ff1681565b6101b96102db3660046116e7565b610f3b565b6102086102ee3660046116e7565b60016020526000908152604090205460ff1681565b610185610311366004611701565b600560209081526000928352604080842090915290825290205481565b61018561033c366004611753565b60046020526000908152604090205481565b600d546101859081565b6101b961036636600461176b565b610f89565b6101b961118c565b6101b96103813660046116e7565b611236565b61038e611543565b600360008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546103c690611b00565b80601f01602080910402602001604051908101604052809291908181526020018280546103f290611b00565b801561043f5780601f106104145761010080835404028352916020019161043f565b820191906000526020600020905b81548152906001019060200180831161042257829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b03191681526020019060030190602082600201049283019260010382029150808411610479575050509284525050506004919091015460ff16151560209091015292915050565b6104dd611543565b600083815260076020908152604080832085845282528083205483526003825291829020825160a0810190935280548352600181018054919284019161052290611b00565b80601f016020809104026020016040519081016040528092919081815260200182805461054e90611b00565b801561059b5780601f106105705761010080835404028352916020019161059b565b820191906000526020600020905b81548152906001019060200180831161057e57829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b031916815260200190600301906020826002010492830192600103820291508084116105d5575050509284525050506004919091015460ff1615156020909101529392505050565b3360009081526002602052604090205460ff1661066a5760405162461bcd60e51b815260040161066190611922565b60405180910390fd5b6000828152600760209081526040808320848452825280832054835260039091529020600201546001600160a01b031633146106f75760405162461bcd60e51b815260206004820152602660248201527f43616c6c6572206973206e6f7420746865206f776e6572206f662074686520736044820152653a30ba34b7b760d11b6064820152608401610661565b600082815260076020908152604080832084845282528083205483526003825291829020600401805460ff1916905581518481529081018390527f59c766dde985af4f6dd5f1d75d4933f9f24cb7760dfd0e80b6d25471b9b1282c910160405180910390a15050565b6000546001600160a01b0316331461078a5760405162461bcd60e51b8152600401610661906118ed565b61079460006112d1565b565b600360205260009081526040902080546001820180549192916107b890611b00565b80601f01602080910402602001604051908101604052809291908181526020018280546107e490611b00565b80156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b50505050600283015460049093015491926001600160a01b03169160ff16905084565b3360009081526001602052604090205460ff166108b35760405162461bcd60e51b815260206004820152601e60248201527f546869732046656174757265206973206f6e6c7920666f7220757365727300006044820152606401610661565b6108c1600c80546001019055565b6000858152600760209081526040808320878452909152902054600b5481111580156108ed5750600081115b6109395760405162461bcd60e51b815260206004820152601d60248201527f696e64657820666f7220626f6f6b696e67206e6f7420616c6c6f7765640000006044820152606401610661565b6001600160e81b031983166109905760405162461bcd60e51b815260206004820152601c60248201527f6e6577207363686564756c652063616e6e6f7420626520656d707479000000006044820152606401610661565b6000600360008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546109ca90611b00565b80601f01602080910402602001604051908101604052809291908181526020018280546109f690611b00565b8015610a435780601f10610a1857610100808354040283529160200191610a43565b820191906000526020600020905b815481529060010190602001808311610a2657829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b03191681526020019060030190602082600201049283019260010382029150808411610a7d575050509284525050506004919091015460ff1615156020909101526080810151909150610b275760405162461bcd60e51b815260206004820152601d60248201527f43757272656e742053746174696f6e206973206e6f74206163746976650000006044820152606401610661565b80516001600160a01b03841660009081526006602052604090205460ff16610b915760405162461bcd60e51b815260206004820152601a60248201527f7468697320746f6b656e206973206e6f742061636365707465640000000000006044820152606401610661565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038516906323b872dd90606401602060405180830381600087803b158015610bdf57600080fd5b505af1158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c179190611733565b50600083815260046020526040812054879190610c349042611ae9565b9050600954811115610d10576000610c576009548361132190919063ffffffff16565b90508060078110610ca057506007610c6f8282611321565b600954610c7c9190611aca565b60008881526004602052604081208054909190610c9a908490611a9e565b90915550505b60015b818160ff1611610d0c57610cb8600186611a9e565b9450600060e81b87606001518260ff1660088110610ce657634e487b7160e01b600052603260045260246000fd5b6001600160e81b0319909216602092909202015280610d0481611b56565b915050610ca3565b5050505b610d1b600783611b76565b9150600084606001518360088110610d4357634e487b7160e01b600052603260045260246000fd5b6020020151881690506001600160e81b0319811615610d9c5760405162461bcd60e51b81526020600482015260156024820152746e6577207363686564756c65206f7665726c61707360581b6044820152606401610661565b84606001518360088110610dc057634e487b7160e01b600052603260045260246000fd5b6020020151881785606001518460088110610deb57634e487b7160e01b600052603260045260246000fd5b6001600160e81b03199092166020928302919091015260008781526003825260409020865181558682015180518893610e2b926001850192910190611581565b5060408201516002820180546001600160a01b0319166001600160a01b039092169190911790556060820151610e679060038301906008611605565b506080918201516004909101805460ff1916911515919091179055604080518d8152602081018d9052908101869052606081018590526001600160e81b03198a16918101919091527fcae132a109c390490a273e807eb7367bb9289551d5b0493bdfd9b3ff52d7dcf89060a00160405180910390a15050505050505050505050565b33600081815260016020818152604092839020805460ff191690921790915590519182527f4028b92b6812cf0ad64ad14283561bd81eaf1d9e718a6eabcfd40016f83bd1e991015b60405180910390a1565b6000546001600160a01b03163314610f655760405162461bcd60e51b8152600401610661906118ed565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b3360009081526002602052604090205460ff16610fb85760405162461bcd60e51b815260040161066190611922565b6001600160a01b03821660009081526006602052604090205460ff166110205760405162461bcd60e51b815260206004820152601960248201527f7468697320746f6b656e206973206e6f7420616c6c6f776564000000000000006044820152606401610661565b600061103a826110346007818a6018611334565b90611334565b6040516323b872dd60e01b8152336004820152306024820152604481018290529091506001600160a01b038416906323b872dd90606401602060405180830381600087803b15801561108b57600080fd5b505af115801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190611733565b506001600160a01b0383166000908152600560209081526040808320338452909152812080548392906110f7908490611a9e565b9091555050600d805460010190556000611110600d5490565b905060005b8381101561113b5761112988888885611340565b8061113381611b3b565b915050611115565b507fc805ef5cc6135113c4e86465c528816ebb074fffeb26b77c8c146ef92cf26df3611166600b5490565b87878a8660405161117b9594939291906119fd565b60405180910390a150505050505050565b3360009081526001602052604090205460ff166111eb5760405162461bcd60e51b815260206004820152601e60248201527f546869732046656174757265206973206f6e6c7920666f7220757365727300006044820152606401610661565b33600081815260026020908152604091829020805460ff1916600117905590519182527f17e59d09e97aca8953388600495a0ba17a6c0caef6d4e7a595c1921ecaadc4559101610f31565b6000546001600160a01b031633146112605760405162461bcd60e51b8152600401610661906118ed565b6001600160a01b0381166112c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610661565b6112ce816112d1565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061132d8284611ab6565b9392505050565b600061132d8284611aca565b61134e600b80546001019055565b60006040518060a0016040528086815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505033602080850191909152604080516101008101825284815291820184905281810184905260608083018590526080830185905260a0830185905260c0830185905260e08301859052908501919091526001930192909252600a5492935060049150611402600b5490565b8152602001908152602001600020819055508060036000611422600b5490565b815260208082019290925260400160002082518155828201518051919261145192600185019290910190611581565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015161148d9060038301906008611605565b50608091909101516004909101805460ff191691151591909117905560008281526008602052604081208054916114c383611b3b565b9091555050600b54600083815260076020908152604080832060088084528285208054865291845291842094909455918590525254600b547fce395db023d011bb1b5250a05ed9da88bd09cb0513699c20609ff4816508f5eb91849187878a60405161153496959493929190611a65565b60405180910390a15050505050565b6040518060a00160405280600081526020016060815260200160006001600160a01b03168152602001611574611697565b8152600060209091015290565b82805461158d90611b00565b90600052602060002090601f0160209004810192826115af57600085556115f5565b82601f106115c857805160ff19168380011785556115f5565b828001600101855582156115f5579182015b828111156115f55782518255916020019190600101906115da565b506116019291506116b6565b5090565b6001830191839082156115f55791602002820160005b8382111561165b57835183826101000a81548162ffffff021916908360e81c0217905550926020019260030160208160020104928301926001030261161b565b801561168a5782816101000a81549062ffffff021916905560030160208160020104928301926001030261165b565b50506116019291506116b6565b6040518061010001604052806008906020820280368337509192915050565b5b8082111561160157600081556001016116b7565b80356001600160a01b03811681146116e257600080fd5b919050565b6000602082840312156116f8578081fd5b61132d826116cb565b60008060408385031215611713578081fd5b61171c836116cb565b915061172a602084016116cb565b90509250929050565b600060208284031215611744578081fd5b8151801515811461132d578182fd5b600060208284031215611764578081fd5b5035919050565b600080600080600060808688031215611782578081fd5b85359450602086013567ffffffffffffffff808211156117a0578283fd5b818801915088601f8301126117b3578283fd5b8135818111156117c1578384fd5b8960208285010111156117d2578384fd5b6020830196508095505050506117ea604087016116cb565b949793965091946060013592915050565b6000806040838503121561180d578182fd5b50508035926020909101359150565b600080600080600060a08688031215611833578081fd5b85359450602086013593506040860135925060608601356001600160e81b03198116811461185f578182fd5b915061186d608087016116cb565b90509295509295909350565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452815b818110156118c7576020818501810151868301820152016118ab565b818111156118d85782602083870101525b50601f01601f19169290920160200192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f546f206265636f6d6520612070726f766964657220796f75206e65656420746f6040820152721031329030903ab9b2b91037b3102537b6a2ab60691b606082015260800190565b600060208083528351818401528084015161018080604086015261199d6101a08601836118a2565b915060018060a01b036040870151166060860152606086015160808601855b60088110156119e35782516001600160e81b031916825291850191908501906001016119bc565b505050608086015180151586830152925050949350505050565b858152608060208201526000611a17608083018688611879565b604083019490945250606001529392505050565b848152608060208201526000611a4460808301866118a2565b6001600160a01b039490941660408301525090151560609091015292915050565b86815285602082015284604082015260a060608201526000611a8b60a083018587611879565b9050826080830152979650505050505050565b60008219821115611ab157611ab1611b8a565b500190565b600082611ac557611ac5611ba0565b500490565b6000816000190483118215151615611ae457611ae4611b8a565b500290565b600082821015611afb57611afb611b8a565b500390565b600181811c90821680611b1457607f821691505b60208210811415611b3557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611b4f57611b4f611b8a565b5060010190565b600060ff821660ff811415611b6d57611b6d611b8a565b60010192915050565b600082611b8557611b85611ba0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220e03830e6595e2f3e8c702d16d40701798a61161bd1edd888ae0ed9a938863ae364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806394ba53dc116100c3578063a4e47b661161007c578063a4e47b6614610303578063b869813f1461032e578063dad03ec01461034e578063e32819c514610358578063e569e5a61461036b578063f2fde38b1461037357600080fd5b806394ba53dc146102645780639590a542146102775780639ab304261461027f5780639f50da31146102aa578063a1403ec9146102cd578063a230c524146102e057600080fd5b806365a6ec7e1161011557806365a6ec7e146101c55780636b074a07146101e5578063715018a614610218578063796b89b9146102205780638da5cb5b14610226578063903dfb601461024157600080fd5b8063106e054d146101525780631e5c502e1461017b5780632d318a9914610193578063449efb25146101a65780634c428def146101bb575b600080fd5b610165610160366004611753565b610386565b6040516101729190611975565b60405180910390f35b600b546101859081565b604051908152602001610172565b6101656101a13660046117fb565b6104d5565b6101b96101b43660046117fb565b610632565b005b600c546101859081565b6101856101d3366004611753565b60086020526000908152604090205481565b6102086101f33660046116e7565b60026020526000908152604090205460ff1681565b6040519015158152602001610172565b6101b9610760565b42610185565b6000546040516001600160a01b039091168152602001610172565b61025461024f366004611753565b610796565b6040516101729493929190611a2b565b6101b961027236600461181c565b610854565b6101b9610ee9565b61018561028d3660046117fb565b600760209081526000928352604080842090915290825290205481565b6102086102b83660046116e7565b60066020526000908152604090205460ff1681565b6101b96102db3660046116e7565b610f3b565b6102086102ee3660046116e7565b60016020526000908152604090205460ff1681565b610185610311366004611701565b600560209081526000928352604080842090915290825290205481565b61018561033c366004611753565b60046020526000908152604090205481565b600d546101859081565b6101b961036636600461176b565b610f89565b6101b961118c565b6101b96103813660046116e7565b611236565b61038e611543565b600360008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546103c690611b00565b80601f01602080910402602001604051908101604052809291908181526020018280546103f290611b00565b801561043f5780601f106104145761010080835404028352916020019161043f565b820191906000526020600020905b81548152906001019060200180831161042257829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b03191681526020019060030190602082600201049283019260010382029150808411610479575050509284525050506004919091015460ff16151560209091015292915050565b6104dd611543565b600083815260076020908152604080832085845282528083205483526003825291829020825160a0810190935280548352600181018054919284019161052290611b00565b80601f016020809104026020016040519081016040528092919081815260200182805461054e90611b00565b801561059b5780601f106105705761010080835404028352916020019161059b565b820191906000526020600020905b81548152906001019060200180831161057e57829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b031916815260200190600301906020826002010492830192600103820291508084116105d5575050509284525050506004919091015460ff1615156020909101529392505050565b3360009081526002602052604090205460ff1661066a5760405162461bcd60e51b815260040161066190611922565b60405180910390fd5b6000828152600760209081526040808320848452825280832054835260039091529020600201546001600160a01b031633146106f75760405162461bcd60e51b815260206004820152602660248201527f43616c6c6572206973206e6f7420746865206f776e6572206f662074686520736044820152653a30ba34b7b760d11b6064820152608401610661565b600082815260076020908152604080832084845282528083205483526003825291829020600401805460ff1916905581518481529081018390527f59c766dde985af4f6dd5f1d75d4933f9f24cb7760dfd0e80b6d25471b9b1282c910160405180910390a15050565b6000546001600160a01b0316331461078a5760405162461bcd60e51b8152600401610661906118ed565b61079460006112d1565b565b600360205260009081526040902080546001820180549192916107b890611b00565b80601f01602080910402602001604051908101604052809291908181526020018280546107e490611b00565b80156108315780601f1061080657610100808354040283529160200191610831565b820191906000526020600020905b81548152906001019060200180831161081457829003601f168201915b50505050600283015460049093015491926001600160a01b03169160ff16905084565b3360009081526001602052604090205460ff166108b35760405162461bcd60e51b815260206004820152601e60248201527f546869732046656174757265206973206f6e6c7920666f7220757365727300006044820152606401610661565b6108c1600c80546001019055565b6000858152600760209081526040808320878452909152902054600b5481111580156108ed5750600081115b6109395760405162461bcd60e51b815260206004820152601d60248201527f696e64657820666f7220626f6f6b696e67206e6f7420616c6c6f7765640000006044820152606401610661565b6001600160e81b031983166109905760405162461bcd60e51b815260206004820152601c60248201527f6e6577207363686564756c652063616e6e6f7420626520656d707479000000006044820152606401610661565b6000600360008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546109ca90611b00565b80601f01602080910402602001604051908101604052809291908181526020018280546109f690611b00565b8015610a435780601f10610a1857610100808354040283529160200191610a43565b820191906000526020600020905b815481529060010190602001808311610a2657829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b03191681526020019060030190602082600201049283019260010382029150808411610a7d575050509284525050506004919091015460ff1615156020909101526080810151909150610b275760405162461bcd60e51b815260206004820152601d60248201527f43757272656e742053746174696f6e206973206e6f74206163746976650000006044820152606401610661565b80516001600160a01b03841660009081526006602052604090205460ff16610b915760405162461bcd60e51b815260206004820152601a60248201527f7468697320746f6b656e206973206e6f742061636365707465640000000000006044820152606401610661565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038516906323b872dd90606401602060405180830381600087803b158015610bdf57600080fd5b505af1158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c179190611733565b50600083815260046020526040812054879190610c349042611ae9565b9050600954811115610d10576000610c576009548361132190919063ffffffff16565b90508060078110610ca057506007610c6f8282611321565b600954610c7c9190611aca565b60008881526004602052604081208054909190610c9a908490611a9e565b90915550505b60015b818160ff1611610d0c57610cb8600186611a9e565b9450600060e81b87606001518260ff1660088110610ce657634e487b7160e01b600052603260045260246000fd5b6001600160e81b0319909216602092909202015280610d0481611b56565b915050610ca3565b5050505b610d1b600783611b76565b9150600084606001518360088110610d4357634e487b7160e01b600052603260045260246000fd5b6020020151881690506001600160e81b0319811615610d9c5760405162461bcd60e51b81526020600482015260156024820152746e6577207363686564756c65206f7665726c61707360581b6044820152606401610661565b84606001518360088110610dc057634e487b7160e01b600052603260045260246000fd5b6020020151881785606001518460088110610deb57634e487b7160e01b600052603260045260246000fd5b6001600160e81b03199092166020928302919091015260008781526003825260409020865181558682015180518893610e2b926001850192910190611581565b5060408201516002820180546001600160a01b0319166001600160a01b039092169190911790556060820151610e679060038301906008611605565b506080918201516004909101805460ff1916911515919091179055604080518d8152602081018d9052908101869052606081018590526001600160e81b03198a16918101919091527fcae132a109c390490a273e807eb7367bb9289551d5b0493bdfd9b3ff52d7dcf89060a00160405180910390a15050505050505050505050565b33600081815260016020818152604092839020805460ff191690921790915590519182527f4028b92b6812cf0ad64ad14283561bd81eaf1d9e718a6eabcfd40016f83bd1e991015b60405180910390a1565b6000546001600160a01b03163314610f655760405162461bcd60e51b8152600401610661906118ed565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b3360009081526002602052604090205460ff16610fb85760405162461bcd60e51b815260040161066190611922565b6001600160a01b03821660009081526006602052604090205460ff166110205760405162461bcd60e51b815260206004820152601960248201527f7468697320746f6b656e206973206e6f7420616c6c6f776564000000000000006044820152606401610661565b600061103a826110346007818a6018611334565b90611334565b6040516323b872dd60e01b8152336004820152306024820152604481018290529091506001600160a01b038416906323b872dd90606401602060405180830381600087803b15801561108b57600080fd5b505af115801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190611733565b506001600160a01b0383166000908152600560209081526040808320338452909152812080548392906110f7908490611a9e565b9091555050600d805460010190556000611110600d5490565b905060005b8381101561113b5761112988888885611340565b8061113381611b3b565b915050611115565b507fc805ef5cc6135113c4e86465c528816ebb074fffeb26b77c8c146ef92cf26df3611166600b5490565b87878a8660405161117b9594939291906119fd565b60405180910390a150505050505050565b3360009081526001602052604090205460ff166111eb5760405162461bcd60e51b815260206004820152601e60248201527f546869732046656174757265206973206f6e6c7920666f7220757365727300006044820152606401610661565b33600081815260026020908152604091829020805460ff1916600117905590519182527f17e59d09e97aca8953388600495a0ba17a6c0caef6d4e7a595c1921ecaadc4559101610f31565b6000546001600160a01b031633146112605760405162461bcd60e51b8152600401610661906118ed565b6001600160a01b0381166112c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610661565b6112ce816112d1565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061132d8284611ab6565b9392505050565b600061132d8284611aca565b61134e600b80546001019055565b60006040518060a0016040528086815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505033602080850191909152604080516101008101825284815291820184905281810184905260608083018590526080830185905260a0830185905260c0830185905260e08301859052908501919091526001930192909252600a5492935060049150611402600b5490565b8152602001908152602001600020819055508060036000611422600b5490565b815260208082019290925260400160002082518155828201518051919261145192600185019290910190611581565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015161148d9060038301906008611605565b50608091909101516004909101805460ff191691151591909117905560008281526008602052604081208054916114c383611b3b565b9091555050600b54600083815260076020908152604080832060088084528285208054865291845291842094909455918590525254600b547fce395db023d011bb1b5250a05ed9da88bd09cb0513699c20609ff4816508f5eb91849187878a60405161153496959493929190611a65565b60405180910390a15050505050565b6040518060a00160405280600081526020016060815260200160006001600160a01b03168152602001611574611697565b8152600060209091015290565b82805461158d90611b00565b90600052602060002090601f0160209004810192826115af57600085556115f5565b82601f106115c857805160ff19168380011785556115f5565b828001600101855582156115f5579182015b828111156115f55782518255916020019190600101906115da565b506116019291506116b6565b5090565b6001830191839082156115f55791602002820160005b8382111561165b57835183826101000a81548162ffffff021916908360e81c0217905550926020019260030160208160020104928301926001030261161b565b801561168a5782816101000a81549062ffffff021916905560030160208160020104928301926001030261165b565b50506116019291506116b6565b6040518061010001604052806008906020820280368337509192915050565b5b8082111561160157600081556001016116b7565b80356001600160a01b03811681146116e257600080fd5b919050565b6000602082840312156116f8578081fd5b61132d826116cb565b60008060408385031215611713578081fd5b61171c836116cb565b915061172a602084016116cb565b90509250929050565b600060208284031215611744578081fd5b8151801515811461132d578182fd5b600060208284031215611764578081fd5b5035919050565b600080600080600060808688031215611782578081fd5b85359450602086013567ffffffffffffffff808211156117a0578283fd5b818801915088601f8301126117b3578283fd5b8135818111156117c1578384fd5b8960208285010111156117d2578384fd5b6020830196508095505050506117ea604087016116cb565b949793965091946060013592915050565b6000806040838503121561180d578182fd5b50508035926020909101359150565b600080600080600060a08688031215611833578081fd5b85359450602086013593506040860135925060608601356001600160e81b03198116811461185f578182fd5b915061186d608087016116cb565b90509295509295909350565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452815b818110156118c7576020818501810151868301820152016118ab565b818111156118d85782602083870101525b50601f01601f19169290920160200192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f546f206265636f6d6520612070726f766964657220796f75206e65656420746f6040820152721031329030903ab9b2b91037b3102537b6a2ab60691b606082015260800190565b600060208083528351818401528084015161018080604086015261199d6101a08601836118a2565b915060018060a01b036040870151166060860152606086015160808601855b60088110156119e35782516001600160e81b031916825291850191908501906001016119bc565b505050608086015180151586830152925050949350505050565b858152608060208201526000611a17608083018688611879565b604083019490945250606001529392505050565b848152608060208201526000611a4460808301866118a2565b6001600160a01b039490941660408301525090151560609091015292915050565b86815285602082015284604082015260a060608201526000611a8b60a083018587611879565b9050826080830152979650505050505050565b60008219821115611ab157611ab1611b8a565b500190565b600082611ac557611ac5611ba0565b500490565b6000816000190483118215151615611ae457611ae4611b8a565b500290565b600082821015611afb57611afb611b8a565b500390565b600181811c90821680611b1457607f821691505b60208210811415611b3557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611b4f57611b4f611b8a565b5060010190565b600060ff821660ff811415611b6d57611b6d611b8a565b60010192915050565b600082611b8557611b85611ba0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220e03830e6595e2f3e8c702d16d40701798a61161bd1edd888ae0ed9a938863ae364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bookStation(uint256,uint256,uint256,bytes3,address)": {
        "details": "** @note   index : index of the station ( starts from 1 day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed time : pass in bytes 24 slots ( hrs ) i.e: 0010 0001 0000 0000 => we book for hours 3 and 8 parse into hex : 0x2100 => this is the input tokenAddr : token which is used to perform the transaction , must be an approved token*"
      },
      "getBlockTimestamp()": {
        "details": "dummy call for usage in the testing*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1340,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "isMember",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1344,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "isProvider",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1349,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "stationsMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Station)1279_storage)"
      },
      {
        "astId": 1353,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "station_time_lower_bound",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1359,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "stakes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1363,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "isAcceptedPayment",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1369,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "ChargingPointToStation",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1373,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "StationCounterInChargingPoint",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1376,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "TIMESTAMP_PER_DAY",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1378,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "contract_time_lower_bound",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1381,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "stationIDs",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)821_storage"
      },
      {
        "astId": 1384,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "bookingIDs",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)821_storage"
      },
      {
        "astId": 1387,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "ChargingPointIDs",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Counter)821_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes3)8_storage": {
        "base": "t_bytes3",
        "encoding": "inplace",
        "label": "bytes3[8]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes3": {
        "encoding": "inplace",
        "label": "bytes3",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Station)1279_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Station)",
        "numberOfBytes": "32",
        "value": "t_struct(Station)1279_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)821_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 820,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Station)1279_storage": {
        "encoding": "inplace",
        "label": "struct Station",
        "members": [
          {
            "astId": 1268,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "pricePerHour",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1270,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "location",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1272,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1276,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "availability",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes3)8_storage"
          },
          {
            "astId": 1278,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}