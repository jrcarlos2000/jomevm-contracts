{
  "address": "0x20E0c5F61124D184101a0A8d9afaeA69F5dAB907",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes3",
          "name": "bookingSlot",
          "type": "bytes3"
        }
      ],
      "name": "BookingSubmited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "providerAddr",
          "type": "address"
        }
      ],
      "name": "ProviderJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        }
      ],
      "name": "StationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "StationDesactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "UserJoined",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "addAcceptedPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pricePerHour",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "addStation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "internalType": "bytes3",
          "name": "time",
          "type": "bytes3"
        },
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "bookStation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bookingIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "desactivateStation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pricePerHour",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes3[8]",
              "name": "availability",
              "type": "bytes3[8]"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Station",
          "name": "station",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAcceptedPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinAsProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinAsUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stationIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "station_time_lower_bound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stationsMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pricePerHour",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x534bfebf47b5a7097751a0d7ddf8a2f4935903d3825cb95b1648ddbcf41096e5",
  "receipt": {
    "to": null,
    "from": "0x17BAd8cbCDeC350958dF0Bfe01E284dd8Fec3fcD",
    "contractAddress": "0x20E0c5F61124D184101a0A8d9afaeA69F5dAB907",
    "transactionIndex": 0,
    "gasUsed": "1456017",
    "logsBloom": "0x
    "blockHash": "0x69b9675932eddf11b21fab2dd50671564ca566af3d8123db79b037619a1fd9c4",
    "transactionHash": "0x534bfebf47b5a7097751a0d7ddf8a2f4935903d3825cb95b1648ddbcf41096e5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x534bfebf47b5a7097751a0d7ddf8a2f4935903d3825cb95b1648ddbcf41096e5",
        "address": "0x20E0c5F61124D184101a0A8d9afaeA69F5dAB907",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000017bad8cbcdec350958df0bfe01e284dd8fec3fcd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x69b9675932eddf11b21fab2dd50671564ca566af3d8123db79b037619a1fd9c4"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1456017",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "10efb7355be5950137a407d5cf2719a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes3\",\"name\":\"bookingSlot\",\"type\":\"bytes3\"}],\"name\":\"BookingSubmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"providerAddr\",\"type\":\"address\"}],\"name\":\"ProviderJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"StationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StationDesactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"UserJoined\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"addAcceptedPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"addStation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"bytes3\",\"name\":\"time\",\"type\":\"bytes3\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"bookStation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookingIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"desactivateStation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes3[8]\",\"name\":\"availability\",\"type\":\"bytes3[8]\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct Station\",\"name\":\"station\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAcceptedPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinAsProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinAsUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stationIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"station_time_lower_bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stationsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStation(uint256,string,address)\":{\"details\":\"** @note   pricePerHour : price x hour of current station location : must be passed in coordinates or other relevant way tokenAddr : token which is used to perform the transaction , must be an approved token*\"},\"bookStation(uint256,uint256,bytes3,address)\":{\"details\":\"** @note   index : index of the station ( starts from 1 day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed time : pass in bytes 24 slots ( hrs ) i.e: 0010 0001 0000 0000 => we book for hours 3 and 8 parse into hex : 0x2100 => this is the input tokenAddr : token which is used to perform the transaction , must be an approved token*\"},\"getBlockTimestamp()\":{\"details\":\"dummy call for usage in the testing*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JomEV.sol\":\"JomEV\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/JomEV.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nstruct Station {\\n    uint256 pricePerHour;\\n    string location;\\n    address owner;\\n    bytes3[8] availability;\\n    bool isActive;\\n}\\n\\ncontract JomEV is Ownable{\\n\\n    using Counters for Counters.Counter; \\n    using SafeMath for uint256;\\n\\n    event UserJoined(address userAddr);\\n    event ProviderJoined(address providerAddr);\\n    event BookingSubmited(uint256 fee, uint256 index, uint256 day, bytes3 bookingSlot);\\n    event StationAdded(uint256 index, string location, uint256 price, uint256 amountStaked);\\n    event StationDesactivated(uint256 index);\\n\\n    mapping(address => bool) public isMember;\\n    mapping(address => bool) public isProvider;\\n    mapping(uint256 => Station) public stationsMap;\\n    mapping(uint256 => uint256) public station_time_lower_bound;\\n    mapping(address => mapping (address => uint256)) public stakes;\\n    mapping (address => bool) public isAcceptedPayment;\\n\\n    uint256 private TIMESTAMP_PER_DAY = 86400;\\n    uint256 internal contract_time_lower_bound;\\n    Counters.Counter public stationIDs;\\n    Counters.Counter public bookingIDs;\\n    constructor () {\\n        contract_time_lower_bound = block.timestamp;\\n    }\\n    modifier onlyUser() {\\n        require(isMember[msg.sender], \\\"This Feature is only for users\\\");\\n        _;\\n    }\\n    modifier onlyProvider() {\\n        require(isProvider[msg.sender], \\\"To become a provider you need to be a user of JomEV\\\");\\n        _;\\n    }\\n\\n    //dummy function for now, we will use worldcoin to upgrade this\\n    function joinAsUser() external {\\n        //worldcoin verification\\n        isMember[msg.sender] = true;\\n        emit UserJoined(msg.sender);\\n    } \\n    function joinAsProvider() external onlyUser {\\n        isProvider[msg.sender] = true;\\n        emit ProviderJoined(msg.sender);\\n    }\\n    /**\\n    ** @dev \\n    ** @note  \\n        pricePerHour : price x hour of current station\\n        location : must be passed in coordinates or other relevant way\\n        tokenAddr : token which is used to perform the transaction , must be an approved token\\n    **/\\n    function addStation(uint256 _pricePerHour, string calldata location, address tokenAddr) external onlyProvider {\\n        //perform stake =: 8 days of charge\\n        require(isAcceptedPayment[tokenAddr],\\\"this token is not allowed\\\");\\n        uint256 amountToTransfer = _pricePerHour.mul(24).mul(8);\\n        IERC20(tokenAddr).transferFrom(msg.sender, address(this),amountToTransfer);\\n        stakes[tokenAddr][msg.sender] += amountToTransfer;\\n        stationIDs.increment();\\n        Station memory newStation = Station(_pricePerHour, location, msg.sender, [\\n            bytes3(0),bytes3(0),bytes3(0),bytes3(0),bytes3(0),bytes3(0),bytes3(0),bytes3(0)\\n        ],true);\\n        station_time_lower_bound[stationIDs.current()] = contract_time_lower_bound;\\n        stationsMap[stationIDs.current()] = newStation;\\n\\n        emit StationAdded(stationIDs.current(), location, _pricePerHour, amountToTransfer);\\n    }\\n    /**\\n    ** @dev \\n    ** @note  \\n        index : index of the station ( starts from 1\\n        day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed\\n        time : pass in bytes 24 slots ( hrs )\\n                i.e: 0010 0001 0000 0000 => we book for hours 3 and 8\\n                parse into hex : 0x2100 => this is the input\\n        tokenAddr : token which is used to perform the transaction , must be an approved token\\n\\n    **/\\n    function bookStation(uint256 index, uint256 day, bytes3 time, address tokenAddr) external  onlyUser{\\n\\n        bookingIDs.increment();\\n        require (index <= stationIDs.current() && index > 0,\\\"index for booking not allowed\\\");\\n        require (time != bytes3(0) , \\\"new schedule cannot be empty\\\");\\n        Station memory selectedStation = stationsMap[index];\\n        require(selectedStation.isActive,\\\"Current Station is not active\\\");\\n\\n        //perform payment\\n        uint256 amountRequired = selectedStation.pricePerHour;\\n        require(isAcceptedPayment[tokenAddr],\\\"this token is not accepted\\\");\\n        IERC20(tokenAddr).transferFrom(msg.sender, address(this) , amountRequired);\\n\\n        uint256 startPointer = day;\\n        uint256 diff = block.timestamp - station_time_lower_bound[index];\\n        if( diff > TIMESTAMP_PER_DAY){\\n            uint256 quotient = (diff).div(TIMESTAMP_PER_DAY);\\n            uint256 n = quotient;\\n            if(quotient>=7){\\n                n = 7;\\n                station_time_lower_bound[index]+=(TIMESTAMP_PER_DAY*(quotient.div(7)));\\n            }\\n            for ( uint8 i = 1 ; i <= n ; i++){\\n                startPointer+=1;\\n                selectedStation.availability[i] = bytes3(0);\\n            }\\n        }\\n        startPointer = startPointer % 7;\\n        bytes3 checkOverlap = time & selectedStation.availability[startPointer];\\n        require(checkOverlap == bytes3(0) , \\\"new schedule overlaps\\\");\\n        selectedStation.availability[startPointer] = time | selectedStation.availability[startPointer];\\n        stationsMap[index] = selectedStation;\\n\\n        emit BookingSubmited(amountRequired, index, startPointer, time);\\n    }\\n\\n    function desactivateStation(uint256 index) external onlyProvider {\\n        require(stationsMap[index].owner == msg.sender , \\\"Caller is not the owner of the station\\\");\\n        stationsMap[index].isActive = false;\\n        \\n        emit StationDesactivated(index);\\n    }\\n    function addAcceptedPayment(address tokenAddr) external onlyOwner {\\n        isAcceptedPayment[tokenAddr]= true;\\n    }\\n    //readers\\n    function getStation(uint256 index) external view returns(Station memory station){\\n        return (stationsMap[index]);\\n    }\\n\\n    /** \\n    **  @dev dummy call for usage in the testing\\n    **/\\n    function getBlockTimestamp() external view returns(uint256) {\\n        return(block.timestamp);\\n    }\\n}\",\"keccak256\":\"0x77b3a869c4394cfd8b0826104fa763e0be5f65e05035f50d3f08cbc13607e005\"}},\"version\":1}",
  "bytecode": "0x60806040526201518060075534801561001757600080fd5b506100213361002a565b4260085561007a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61181e806100896000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063903dfb60116100ad578063a230c52411610071578063a230c52414610269578063a4e47b661461028c578063b869813f146102b7578063e569e5a6146102d7578063f2fde38b146102df57600080fd5b8063903dfb60146101f557806394ec766b146102185780639590a5421461022b5780639f50da3114610233578063a1403ec91461025657600080fd5b80634c428def116100f45780634c428def1461018f5780636b074a0714610199578063715018a6146101cc578063796b89b9146101d45780638da5cb5b146101da57600080fd5b8063106e054d146101265780631e5c502e1461014f5780632c4358071461016757806338830d271461017c575b600080fd5b610139610134366004611428565b6102f2565b60405161014691906115e3565b60405180910390f35b6009546101599081565b604051908152602001610146565b61017a6101753660046114c8565b610441565b005b61017a61018a366004611428565b610ab4565b600a546101599081565b6101bc6101a73660046113bc565b60026020526000908152604090205460ff1681565b6040519015158152602001610146565b61017a610bb1565b42610159565b6000546040516001600160a01b039091168152602001610146565b610208610203366004611428565b610be7565b60405161014694939291906116b1565b61017a610226366004611440565b610ca5565b61017a610fc4565b6101bc6102413660046113bc565b60066020526000908152604090205460ff1681565b61017a6102643660046113bc565b611016565b6101bc6102773660046113bc565b60016020526000908152604090205460ff1681565b61015961029a3660046113d6565b600560209081526000928352604080842090915290825290205481565b6101596102c5366004611428565b60046020526000908152604090205481565b61017a611064565b61017a6102ed3660046113bc565b61110e565b6102fa611218565b600360008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546103329061174d565b80601f016020809104026020016040519081016040528092919081815260200182805461035e9061174d565b80156103ab5780601f10610380576101008083540402835291602001916103ab565b820191906000526020600020905b81548152906001019060200180831161038e57829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b031916815260200190600301906020826002010492830192600103820291508084116103e5575050509284525050506004919091015460ff16151560209091015292915050565b3360009081526001602052604090205460ff166104a55760405162461bcd60e51b815260206004820152601e60248201527f546869732046656174757265206973206f6e6c7920666f72207573657273000060448201526064015b60405180910390fd5b6104b3600a80546001019055565b60095484111580156104c55750600084115b6105115760405162461bcd60e51b815260206004820152601d60248201527f696e64657820666f7220626f6f6b696e67206e6f7420616c6c6f776564000000604482015260640161049c565b6001600160e81b031982166105685760405162461bcd60e51b815260206004820152601c60248201527f6e6577207363686564756c652063616e6e6f7420626520656d70747900000000604482015260640161049c565b6000600360008681526020019081526020016000206040518060a0016040529081600082015481526020016001820180546105a29061174d565b80601f01602080910402602001604051908101604052809291908181526020018280546105ce9061174d565b801561061b5780601f106105f05761010080835404028352916020019161061b565b820191906000526020600020905b8154815290600101906020018083116105fe57829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b03191681526020019060030190602082600201049283019260010382029150808411610655575050509284525050506004919091015460ff16151560209091015260808101519091506106ff5760405162461bcd60e51b815260206004820152601d60248201527f43757272656e742053746174696f6e206973206e6f7420616374697665000000604482015260640161049c565b80516001600160a01b03831660009081526006602052604090205460ff166107695760405162461bcd60e51b815260206004820152601a60248201527f7468697320746f6b656e206973206e6f74206163636570746564000000000000604482015260640161049c565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038416906323b872dd90606401602060405180830381600087803b1580156107b757600080fd5b505af11580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef9190611408565b5060008681526004602052604081205486919061080c9042611736565b90506007548111156108e857600061082f600754836111a990919063ffffffff16565b905080600781106108785750600761084782826111a9565b6007546108549190611717565b60008b815260046020526040812080549091906108729084906116eb565b90915550505b60015b818160ff16116108e4576108906001866116eb565b9450600060e81b87606001518260ff16600881106108be57634e487b7160e01b600052603260045260246000fd5b6001600160e81b03199092166020929092020152806108dc81611788565b91505061087b565b5050505b6108f36007836117a8565b915060008460600151836008811061091b57634e487b7160e01b600052603260045260246000fd5b6020020151871690506001600160e81b03198116156109745760405162461bcd60e51b81526020600482015260156024820152746e6577207363686564756c65206f7665726c61707360581b604482015260640161049c565b8460600151836008811061099857634e487b7160e01b600052603260045260246000fd5b60200201518717856060015184600881106109c357634e487b7160e01b600052603260045260246000fd5b6001600160e81b03199092166020928302919091015260008a81526003825260409020865181558682015180518893610a03926001850192910190611256565b5060408201516002820180546001600160a01b0319166001600160a01b039092169190911790556060820151610a3f90600383019060086112da565b506080918201516004909101805460ff191691151591909117905560408051868152602081018c90529081018590526001600160e81b0319891660608201527fe816677b261c805b8f63c052d4c9a30f877199f51454e534a7fa799921851cce910160405180910390a1505050505050505050565b3360009081526002602052604090205460ff16610ae35760405162461bcd60e51b815260040161049c90611590565b6000818152600360205260409020600201546001600160a01b03163314610b5b5760405162461bcd60e51b815260206004820152602660248201527f43616c6c6572206973206e6f7420746865206f776e6572206f662074686520736044820152653a30ba34b7b760d11b606482015260840161049c565b60008181526003602052604090819020600401805460ff19169055517f857ba9c45da680209d221b512baefeb770735eba13065c9ba811c1fa6c852dad90610ba69083815260200190565b60405180910390a150565b6000546001600160a01b03163314610bdb5760405162461bcd60e51b815260040161049c9061155b565b610be560006111bc565b565b60036020526000908152604090208054600182018054919291610c099061174d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c359061174d565b8015610c825780601f10610c5757610100808354040283529160200191610c82565b820191906000526020600020905b815481529060010190602001808311610c6557829003601f168201915b50505050600283015460049093015491926001600160a01b03169160ff16905084565b3360009081526002602052604090205460ff16610cd45760405162461bcd60e51b815260040161049c90611590565b6001600160a01b03811660009081526006602052604090205460ff16610d3c5760405162461bcd60e51b815260206004820152601960248201527f7468697320746f6b656e206973206e6f7420616c6c6f77656400000000000000604482015260640161049c565b6000610d546008610d4e87601861120c565b9061120c565b6040516323b872dd60e01b8152336004820152306024820152604481018290529091506001600160a01b038316906323b872dd90606401602060405180830381600087803b158015610da557600080fd5b505af1158015610db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddd9190611408565b506001600160a01b038216600090815260056020908152604080832033845290915281208054839290610e119084906116eb565b909155505060098054600101905560006040518060a0016040528087815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505033602080850191909152604080516101008101825284815291820184905281810184905260608083018590526080830185905260a0830185905260c0830185905260e0830185905290850191909152600193019290925260085492935060049150610ed360095490565b8152602001908152602001600020819055508060036000610ef360095490565b8152602080820192909252604001600020825181558282015180519192610f2292600185019290910190611256565b5060408201516002820180546001600160a01b0319166001600160a01b039092169190911790556060820151610f5e90600383019060086112da565b50608091909101516004909101805460ff19169115159190911790556009547f790fd0226821c2160ec458ab8efe20565122dd421db270ea1f5939fd286c5fdf9086868986604051610fb495949392919061166b565b60405180910390a1505050505050565b33600081815260016020818152604092839020805460ff191690921790915590519182527f4028b92b6812cf0ad64ad14283561bd81eaf1d9e718a6eabcfd40016f83bd1e991015b60405180910390a1565b6000546001600160a01b031633146110405760405162461bcd60e51b815260040161049c9061155b565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b3360009081526001602052604090205460ff166110c35760405162461bcd60e51b815260206004820152601e60248201527f546869732046656174757265206973206f6e6c7920666f722075736572730000604482015260640161049c565b33600081815260026020908152604091829020805460ff1916600117905590519182527f17e59d09e97aca8953388600495a0ba17a6c0caef6d4e7a595c1921ecaadc455910161100c565b6000546001600160a01b031633146111385760405162461bcd60e51b815260040161049c9061155b565b6001600160a01b03811661119d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161049c565b6111a6816111bc565b50565b60006111b58284611703565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006111b58284611717565b6040518060a00160405280600081526020016060815260200160006001600160a01b0316815260200161124961136c565b8152600060209091015290565b8280546112629061174d565b90600052602060002090601f01602090048101928261128457600085556112ca565b82601f1061129d57805160ff19168380011785556112ca565b828001600101855582156112ca579182015b828111156112ca5782518255916020019190600101906112af565b506112d692915061138b565b5090565b6001830191839082156112ca5791602002820160005b8382111561133057835183826101000a81548162ffffff021916908360e81c021790555092602001926003016020816002010492830192600103026112f0565b801561135f5782816101000a81549062ffffff0219169055600301602081600201049283019260010302611330565b50506112d692915061138b565b6040518061010001604052806008906020820280368337509192915050565b5b808211156112d6576000815560010161138c565b80356001600160a01b03811681146113b757600080fd5b919050565b6000602082840312156113cd578081fd5b6111b5826113a0565b600080604083850312156113e8578081fd5b6113f1836113a0565b91506113ff602084016113a0565b90509250929050565b600060208284031215611419578081fd5b815180151581146111b5578182fd5b600060208284031215611439578081fd5b5035919050565b60008060008060608587031215611455578182fd5b84359350602085013567ffffffffffffffff80821115611473578384fd5b818701915087601f830112611486578384fd5b813581811115611494578485fd5b8860208285010111156114a5578485fd5b6020830195508094505050506114bd604086016113a0565b905092959194509250565b600080600080608085870312156114dd578384fd5b843593506020850135925060408501356001600160e81b031981168114611502578283fd5b91506114bd606086016113a0565b60008151808452815b8181101561153557602081850181015186830182015201611519565b818111156115465782602083870101525b50601f01601f19169290920160200192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f546f206265636f6d6520612070726f766964657220796f75206e65656420746f6040820152721031329030903ab9b2b91037b3102537b6a2ab60691b606082015260800190565b600060208083528351818401528084015161018080604086015261160b6101a0860183611510565b915060018060a01b036040870151166060860152606086015160808601855b60088110156116515782516001600160e81b0319168252918501919085019060010161162a565b505050608086015180151586830152925050949350505050565b85815260806020820152836080820152838560a083013760008060a0868401015260a0601f19601f87011683010190508360408301528260608301529695505050505050565b8481526080602082015260006116ca6080830186611510565b6001600160a01b039490941660408301525090151560609091015292915050565b600082198211156116fe576116fe6117bc565b500190565b600082611712576117126117d2565b500490565b6000816000190483118215151615611731576117316117bc565b500290565b600082821015611748576117486117bc565b500390565b600181811c9082168061176157607f821691505b6020821081141561178257634e487b7160e01b600052602260045260246000fd5b50919050565b600060ff821660ff81141561179f5761179f6117bc565b60010192915050565b6000826117b7576117b76117d2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220466bc2189e64fb289c11e9b2edc5dc436d2404196abfeb6dc70185ab328e9b5c64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStation(uint256,string,address)": {
        "details": "** @note   pricePerHour : price x hour of current station location : must be passed in coordinates or other relevant way tokenAddr : token which is used to perform the transaction , must be an approved token*"
      },
      "bookStation(uint256,uint256,bytes3,address)": {
        "details": "** @note   index : index of the station ( starts from 1 day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed time : pass in bytes 24 slots ( hrs ) i.e: 0010 0001 0000 0000 => we book for hours 3 and 8 parse into hex : 0x2100 => this is the input tokenAddr : token which is used to perform the transaction , must be an approved token*"
      },
      "getBlockTimestamp()": {
        "details": "dummy call for usage in the testing*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1324,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "isMember",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1328,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "isProvider",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1333,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "stationsMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Station)1279_storage)"
      },
      {
        "astId": 1337,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "station_time_lower_bound",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1343,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "stakes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1347,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "isAcceptedPayment",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1350,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "TIMESTAMP_PER_DAY",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1352,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "contract_time_lower_bound",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1355,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "stationIDs",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)821_storage"
      },
      {
        "astId": 1358,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "bookingIDs",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)821_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes3)8_storage": {
        "base": "t_bytes3",
        "encoding": "inplace",
        "label": "bytes3[8]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes3": {
        "encoding": "inplace",
        "label": "bytes3",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Station)1279_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Station)",
        "numberOfBytes": "32",
        "value": "t_struct(Station)1279_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)821_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 820,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Station)1279_storage": {
        "encoding": "inplace",
        "label": "struct Station",
        "members": [
          {
            "astId": 1268,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "pricePerHour",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1270,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "location",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1272,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1276,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "availability",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes3)8_storage"
          },
          {
            "astId": 1278,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}