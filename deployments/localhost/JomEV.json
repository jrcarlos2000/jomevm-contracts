{
  "address": "0x1fDb67E186C6D955f26C5d706a0F3E0aa6d49333",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chargingPointIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes3",
          "name": "bookingSlot",
          "type": "bytes3"
        }
      ],
      "name": "BookingSubmited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        }
      ],
      "name": "ChargingPointAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "charginPointIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        }
      ],
      "name": "ConnectorDesactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "providerAddr",
          "type": "address"
        }
      ],
      "name": "ProviderJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chargingPointId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "StationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "UserJoined",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ChargingPointIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ChargingPointToStation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "StationCounterInChargingPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "addAcceptedPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pricePerHour",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nConnectors",
          "type": "uint256"
        }
      ],
      "name": "addChargingPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chargingPointId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        },
        {
          "internalType": "bytes3",
          "name": "time",
          "type": "bytes3"
        },
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "bookStation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bookingIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chargingPointIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "connectorIndex",
          "type": "uint256"
        }
      ],
      "name": "desactivateConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pricePerHour",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes3[8]",
              "name": "availability",
              "type": "bytes3[8]"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Station",
          "name": "station",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAcceptedPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinAsProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinAsUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stationIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "station_time_lower_bound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stationsMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pricePerHour",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c3f6a0d4f80ba0e5653ccb1ebc6fae89d7526b0cf5b39feb99123508772b359",
  "receipt": {
    "to": null,
    "from": "0x17BAd8cbCDeC350958dF0Bfe01E284dd8Fec3fcD",
    "contractAddress": "0x1fDb67E186C6D955f26C5d706a0F3E0aa6d49333",
    "transactionIndex": 0,
    "gasUsed": "1641733",
    "logsBloom": "0x
    "blockHash": "0x76e400dc1cb5fc0ca63ac2b097f5cf3fea225f4a4343996af03c7c044e221832",
    "transactionHash": "0x7c3f6a0d4f80ba0e5653ccb1ebc6fae89d7526b0cf5b39feb99123508772b359",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x7c3f6a0d4f80ba0e5653ccb1ebc6fae89d7526b0cf5b39feb99123508772b359",
        "address": "0x1fDb67E186C6D955f26C5d706a0F3E0aa6d49333",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000017bad8cbcdec350958df0bfe01e284dd8fec3fcd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x76e400dc1cb5fc0ca63ac2b097f5cf3fea225f4a4343996af03c7c044e221832"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "1641733",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "aaea20b22bc1cebe03a7f1db691953c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chargingPointIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes3\",\"name\":\"bookingSlot\",\"type\":\"bytes3\"}],\"name\":\"BookingSubmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"ChargingPointAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"charginPointIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"}],\"name\":\"ConnectorDesactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"providerAddr\",\"type\":\"address\"}],\"name\":\"ProviderJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chargingPointId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"StationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"UserJoined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ChargingPointIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ChargingPointToStation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StationCounterInChargingPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"addAcceptedPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nConnectors\",\"type\":\"uint256\"}],\"name\":\"addChargingPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chargingPointId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"bytes3\",\"name\":\"time\",\"type\":\"bytes3\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"bookStation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookingIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chargingPointIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"connectorIndex\",\"type\":\"uint256\"}],\"name\":\"desactivateConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes3[8]\",\"name\":\"availability\",\"type\":\"bytes3[8]\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct Station\",\"name\":\"station\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAcceptedPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinAsProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinAsUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stationIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"station_time_lower_bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stationsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerHour\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bookStation(uint256,uint256,uint256,bytes3,address)\":{\"details\":\"** @note   index : index of the station ( starts from 1 day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed time : pass in bytes 24 slots ( hrs ) i.e: 0010 0001 0000 0000 => we book for hours 3 and 8 parse into hex : 0x2100 => this is the input tokenAddr : token which is used to perform the transaction , must be an approved token*\"},\"getBlockTimestamp()\":{\"details\":\"dummy call for usage in the testing*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JomEV.sol\":\"JomEV\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/IVault.sol\":{\"content\":\"// mint 10% JomEV token for user\\r\\n// Earn interest \\r\\n// Stake JomEV token 90%\\r\\n// Store all the stableCoint token in here\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IVault {\\r\\n\\r\\n    function mintEVToken(address User, uint256 amount_deposited, address tokenAddress) external;\\r\\n\\r\\n    function getTokenBalance(address tokenAddress) external  returns(uint256);\\r\\n\\r\\n    function getEVTokenBalance() external  returns(uint256);\\r\\n    \\r\\n    function invest(address platform, address tokenAddress, uint256 amount) external;\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x6af28be4bfb869121bd659ac2b36772d1680eb14198d97fb6aeba85a6df7069e\",\"license\":\"MIT\"},\"contracts/JomEV.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\nstruct Station {\\r\\n    uint256 pricePerHour;\\r\\n    string location;\\r\\n    address owner;\\r\\n    bytes3[8] availability;\\r\\n    bool isActive;\\r\\n}\\r\\n\\r\\ncontract JomEV is Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IVault public vault;\\r\\n\\r\\n    event UserJoined(address userAddr);\\r\\n    event ProviderJoined(address providerAddr);\\r\\n    event BookingSubmited(\\r\\n        uint256 chargingPointIndex,\\r\\n        uint256 connectorIndex,\\r\\n        uint256 fee,\\r\\n        uint256 day,\\r\\n        bytes3 bookingSlot\\r\\n    );\\r\\n    event StationAdded(\\r\\n        uint256 chargingPointId,\\r\\n        uint256 connectorIndex,\\r\\n        uint256 index,\\r\\n        string cid,\\r\\n        uint256 price\\r\\n    );\\r\\n    event ChargingPointAdded(\\r\\n        uint256 index,\\r\\n        string cid,\\r\\n        uint256 price,\\r\\n        uint256 amountStaked\\r\\n    );\\r\\n    event ConnectorDesactivated(\\r\\n        uint256 charginPointIndex,\\r\\n        uint256 connectorIndex\\r\\n    );\\r\\n\\r\\n    mapping(address => bool) public isMember;\\r\\n    mapping(address => bool) public isProvider;\\r\\n    mapping(uint256 => Station) public stationsMap;\\r\\n    mapping(uint256 => uint256) public station_time_lower_bound;\\r\\n    mapping(address => mapping(address => uint256)) public stakes;\\r\\n    mapping(address => bool) public isAcceptedPayment;\\r\\n    mapping(uint256 => mapping(uint256 => uint256))\\r\\n        public ChargingPointToStation;\\r\\n    mapping(uint256 => uint256) public StationCounterInChargingPoint;\\r\\n\\r\\n    uint256 private TIMESTAMP_PER_DAY = 86400;\\r\\n    uint256 internal contract_time_lower_bound;\\r\\n    Counters.Counter public stationIDs;\\r\\n    Counters.Counter public bookingIDs;\\r\\n    Counters.Counter public ChargingPointIDs;\\r\\n\\r\\n    constructor() {\\r\\n        contract_time_lower_bound = block.timestamp;\\r\\n    }\\r\\n\\r\\n    modifier onlyUser() {\\r\\n        require(isMember[msg.sender], \\\"This Feature is only for users\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyProvider() {\\r\\n        require(\\r\\n            isProvider[msg.sender],\\r\\n            \\\"To become a provider you need to be a user of JomEV\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setVault(address _vault) external onlyOwner {\\r\\n        vault = IVault(_vault);\\r\\n    }\\r\\n\\r\\n    //dummy function for now, we will use worldcoin to upgrade this\\r\\n    function joinAsUser() external {\\r\\n        //worldcoin verification\\r\\n        isMember[msg.sender] = true;\\r\\n        emit UserJoined(msg.sender);\\r\\n    }\\r\\n\\r\\n    function joinAsProvider() external onlyUser {\\r\\n        isProvider[msg.sender] = true;\\r\\n        emit ProviderJoined(msg.sender);\\r\\n    }\\r\\n\\r\\n    function addChargingPoint(\\r\\n        uint256 _pricePerHour,\\r\\n        string calldata cid,\\r\\n        address tokenAddr,\\r\\n        uint256 nConnectors\\r\\n    ) external onlyProvider {\\r\\n        require(isAcceptedPayment[tokenAddr], \\\"this token is not allowed\\\");\\r\\n        uint256 amountToTransfer = _pricePerHour.mul(24).mul(7).mul(\\r\\n            nConnectors\\r\\n        );\\r\\n        IERC20(tokenAddr).transferFrom(\\r\\n            msg.sender,\\r\\n            address(vault),\\r\\n            amountToTransfer\\r\\n        );\\r\\n        vault.mintEVToken(msg.sender, amountToTransfer, tokenAddr);\\r\\n        //IERC20(tokenAddr).transferFrom(msg.sender, address(this),amountToTransfer);\\r\\n        stakes[tokenAddr][msg.sender] += amountToTransfer;\\r\\n\\r\\n        ChargingPointIDs.increment();\\r\\n        uint256 currChargingPointCount = ChargingPointIDs.current();\\r\\n        for (uint256 i = 0; i < nConnectors; i++) {\\r\\n            _addStation(_pricePerHour, cid, currChargingPointCount);\\r\\n        }\\r\\n        emit ChargingPointAdded(\\r\\n            stationIDs.current(),\\r\\n            cid,\\r\\n            _pricePerHour,\\r\\n            amountToTransfer\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    ** @dev \\r\\n    ** @note  \\r\\n        pricePerHour : price x hour of current station\\r\\n        location : must be passed in coordinates or other relevant way\\r\\n        tokenAddr : token which is used to perform the transaction , must be an approved token\\r\\n    **/\\r\\n    function _addStation(\\r\\n        uint256 _pricePerHour,\\r\\n        string calldata location,\\r\\n        uint256 chargingPointId\\r\\n    ) internal {\\r\\n        stationIDs.increment();\\r\\n        Station memory newStation = Station(\\r\\n            _pricePerHour,\\r\\n            location,\\r\\n            msg.sender,\\r\\n            [\\r\\n                bytes3(0),\\r\\n                bytes3(0),\\r\\n                bytes3(0),\\r\\n                bytes3(0),\\r\\n                bytes3(0),\\r\\n                bytes3(0),\\r\\n                bytes3(0),\\r\\n                bytes3(0)\\r\\n            ],\\r\\n            true\\r\\n        );\\r\\n        station_time_lower_bound[\\r\\n            stationIDs.current()\\r\\n        ] = contract_time_lower_bound;\\r\\n        stationsMap[stationIDs.current()] = newStation;\\r\\n        StationCounterInChargingPoint[chargingPointId]++;\\r\\n        ChargingPointToStation[chargingPointId][\\r\\n            StationCounterInChargingPoint[chargingPointId]\\r\\n        ] = stationIDs.current();\\r\\n        emit StationAdded(\\r\\n            chargingPointId,\\r\\n            StationCounterInChargingPoint[chargingPointId],\\r\\n            stationIDs.current(),\\r\\n            location,\\r\\n            _pricePerHour\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    ** @dev \\r\\n    ** @note  \\r\\n        index : index of the station ( starts from 1\\r\\n        day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed\\r\\n        time : pass in bytes 24 slots ( hrs )\\r\\n                i.e: 0010 0001 0000 0000 => we book for hours 3 and 8\\r\\n                parse into hex : 0x2100 => this is the input\\r\\n        tokenAddr : token which is used to perform the transaction , must be an approved token\\r\\n\\r\\n    **/\\r\\n    function bookStation(\\r\\n        uint256 chargingPointId,\\r\\n        uint256 connectorIndex,\\r\\n        uint256 day,\\r\\n        bytes3 time,\\r\\n        address tokenAddr\\r\\n    ) external onlyUser {\\r\\n        bookingIDs.increment();\\r\\n        uint256 index = ChargingPointToStation[chargingPointId][connectorIndex];\\r\\n        require(\\r\\n            index <= stationIDs.current() && index > 0,\\r\\n            \\\"index for booking not allowed\\\"\\r\\n        );\\r\\n        require(time != bytes3(0), \\\"new schedule cannot be empty\\\");\\r\\n        Station memory selectedStation = stationsMap[index];\\r\\n        require(selectedStation.isActive, \\\"Current Station is not active\\\");\\r\\n\\r\\n        //perform payment\\r\\n        uint256 amountRequired = selectedStation.pricePerHour;\\r\\n        require(isAcceptedPayment[tokenAddr], \\\"this token is not accepted\\\");\\r\\n        //IERC20(tokenAddr).transferFrom(msg.sender, address(this) , amountRequired);\\r\\n\\r\\n        IERC20(tokenAddr).transferFrom(\\r\\n            msg.sender,\\r\\n            address(vault),\\r\\n            amountRequired\\r\\n        );\\r\\n\\r\\n        uint256 startPointer = day;\\r\\n        uint256 diff = block.timestamp - station_time_lower_bound[index];\\r\\n        if (diff > TIMESTAMP_PER_DAY) {\\r\\n            uint256 quotient = (diff).div(TIMESTAMP_PER_DAY);\\r\\n            uint256 n = quotient;\\r\\n            if (quotient >= 7) {\\r\\n                n = 7;\\r\\n                station_time_lower_bound[index] += (TIMESTAMP_PER_DAY *\\r\\n                    (quotient.div(7)));\\r\\n            }\\r\\n            for (uint8 i = 1; i <= n; i++) {\\r\\n                startPointer += 1;\\r\\n                selectedStation.availability[i] = bytes3(0);\\r\\n            }\\r\\n        }\\r\\n        startPointer = startPointer % 7;\\r\\n        bytes3 checkOverlap = time & selectedStation.availability[startPointer];\\r\\n        require(checkOverlap == bytes3(0), \\\"new schedule overlaps\\\");\\r\\n        selectedStation.availability[startPointer] =\\r\\n            time |\\r\\n            selectedStation.availability[startPointer];\\r\\n        stationsMap[index] = selectedStation;\\r\\n\\r\\n        emit BookingSubmited(\\r\\n            chargingPointId,\\r\\n            connectorIndex,\\r\\n            amountRequired,\\r\\n            startPointer,\\r\\n            time\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function desactivateConnector(\\r\\n        uint256 chargingPointIndex,\\r\\n        uint256 connectorIndex\\r\\n    ) external onlyProvider {\\r\\n        require(\\r\\n            stationsMap[\\r\\n                ChargingPointToStation[chargingPointIndex][connectorIndex]\\r\\n            ].owner == msg.sender,\\r\\n            \\\"Caller is not the owner of the station\\\"\\r\\n        );\\r\\n        stationsMap[ChargingPointToStation[chargingPointIndex][connectorIndex]]\\r\\n            .isActive = false;\\r\\n\\r\\n        emit ConnectorDesactivated(chargingPointIndex, connectorIndex);\\r\\n    }\\r\\n\\r\\n    function addAcceptedPayment(address tokenAddr) external onlyOwner {\\r\\n        isAcceptedPayment[tokenAddr] = true;\\r\\n    }\\r\\n\\r\\n    //readers\\r\\n    function getStation(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (Station memory station)\\r\\n    {\\r\\n        return (stationsMap[index]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     **  @dev dummy call for usage in the testing\\r\\n     **/\\r\\n    function getBlockTimestamp() external view returns (uint256) {\\r\\n        return (block.timestamp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x81fb5f7b9d53cb2508966716ac60484fc1ddee7d7bd5f61d70b9129076511b57\"}},\"version\":1}",
  "bytecode": "0x608060405262015180600a5534801561001757600080fd5b506100213361002a565b42600b5561007a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611b7a806100896000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639590a542116100c3578063b869813f1161007c578063b869813f14610343578063dad03ec014610363578063e32819c51461036d578063e569e5a614610380578063f2fde38b14610388578063fbfa77cf1461039b57600080fd5b80639590a5421461028c5780639ab30426146102945780639f50da31146102bf578063a1403ec9146102e2578063a230c524146102f5578063a4e47b661461031857600080fd5b80636b074a07116101155780636b074a07146101f0578063715018a614610223578063796b89b91461022b5780638da5cb5b14610231578063903dfb601461025657806394ba53dc1461027957600080fd5b8063106e054d1461015d5780631e5c502e14610186578063449efb251461019e5780634c428def146101b357806365a6ec7e146101bd5780636817031b146101dd575b600080fd5b61017061016b3660046116e1565b6103ae565b60405161017d9190611903565b60405180910390f35b600c546101909081565b60405190815260200161017d565b6101b16101ac366004611789565b6104fd565b005b600d546101909081565b6101906101cb3660046116e1565b60096020526000908152604090205481565b6101b16101eb366004611675565b61062c565b6102136101fe366004611675565b60036020526000908152604090205460ff1681565b604051901515815260200161017d565b6101b1610678565b42610190565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161017d565b6102696102643660046116e1565b6106ae565b60405161017d94939291906119b9565b6101b16102873660046117aa565b61076c565b6101b1610e07565b6101906102a2366004611789565b600860209081526000928352604080842090915290825290205481565b6102136102cd366004611675565b60076020526000908152604090205460ff1681565b6101b16102f0366004611675565b610e58565b610213610303366004611675565b60026020526000908152604090205460ff1681565b61019061032636600461168f565b600660209081526000928352604080842090915290825290205481565b6101906103513660046116e1565b60056020526000908152604090205481565b600e546101909081565b6101b161037b3660046116f9565b610ea6565b6101b161111a565b6101b1610396366004611675565b6111c4565b60015461023e906001600160a01b031681565b6103b66114d1565b600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546103ee90611a8e565b80601f016020809104026020016040519081016040528092919081815260200182805461041a90611a8e565b80156104675780601f1061043c57610100808354040283529160200191610467565b820191906000526020600020905b81548152906001019060200180831161044a57829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b031916815260200190600301906020826002010492830192600103820291508084116104a1575050509284525050506004919091015460ff16151560209091015292915050565b3360009081526003602052604090205460ff166105355760405162461bcd60e51b815260040161052c906118b0565b60405180910390fd5b6000828152600860209081526040808320848452825280832054835260049091529020600201546001600160a01b031633146105c25760405162461bcd60e51b815260206004820152602660248201527f43616c6c6572206973206e6f7420746865206f776e6572206f662074686520736044820152653a30ba34b7b760d11b606482015260840161052c565b60008281526008602090815260408083208484528252808320548352600480835292819020909201805460ff1916905581518481529081018390527f59c766dde985af4f6dd5f1d75d4933f9f24cb7760dfd0e80b6d25471b9b1282c910160405180910390a15050565b6000546001600160a01b031633146106565760405162461bcd60e51b815260040161052c9061187b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146106a25760405162461bcd60e51b815260040161052c9061187b565b6106ac600061125f565b565b600460205260009081526040902080546001820180549192916106d090611a8e565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc90611a8e565b80156107495780601f1061071e57610100808354040283529160200191610749565b820191906000526020600020905b81548152906001019060200180831161072c57829003601f168201915b50505050600283015460049093015491926001600160a01b03169160ff16905084565b3360009081526002602052604090205460ff166107cb5760405162461bcd60e51b815260206004820152601e60248201527f546869732046656174757265206973206f6e6c7920666f722075736572730000604482015260640161052c565b6107d9600d80546001019055565b6000858152600860209081526040808320878452909152902054600c5481111580156108055750600081115b6108515760405162461bcd60e51b815260206004820152601d60248201527f696e64657820666f7220626f6f6b696e67206e6f7420616c6c6f776564000000604482015260640161052c565b6001600160e81b031983166108a85760405162461bcd60e51b815260206004820152601c60248201527f6e6577207363686564756c652063616e6e6f7420626520656d70747900000000604482015260640161052c565b6000600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546108e290611a8e565b80601f016020809104026020016040519081016040528092919081815260200182805461090e90611a8e565b801561095b5780601f106109305761010080835404028352916020019161095b565b820191906000526020600020905b81548152906001019060200180831161093e57829003601f168201915b505050918352505060028201546001600160a01b031660208201526040805161010081018083529190920191906003840190600890826000855b82829054906101000a900460e81b6001600160e81b03191681526020019060030190602082600201049283019260010382029150808411610995575050509284525050506004919091015460ff1615156020909101526080810151909150610a3f5760405162461bcd60e51b815260206004820152601d60248201527f43757272656e742053746174696f6e206973206e6f7420616374697665000000604482015260640161052c565b80516001600160a01b03841660009081526007602052604090205460ff16610aa95760405162461bcd60e51b815260206004820152601a60248201527f7468697320746f6b656e206973206e6f74206163636570746564000000000000604482015260640161052c565b6001546040516323b872dd60e01b81523360048201526001600160a01b03918216602482015260448101839052908516906323b872dd90606401602060405180830381600087803b158015610afd57600080fd5b505af1158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3591906116c1565b50600083815260056020526040812054879190610b529042611a77565b9050600a54811115610c2e576000610b75600a54836112af90919063ffffffff16565b90508060078110610bbe57506007610b8d82826112af565b600a54610b9a9190611a58565b60008881526005602052604081208054909190610bb8908490611a2c565b90915550505b60015b818160ff1611610c2a57610bd6600186611a2c565b9450600060e81b87606001518260ff1660088110610c0457634e487b7160e01b600052603260045260246000fd5b6001600160e81b0319909216602092909202015280610c2281611ae4565b915050610bc1565b5050505b610c39600783611b04565b9150600084606001518360088110610c6157634e487b7160e01b600052603260045260246000fd5b6020020151881690506001600160e81b0319811615610cba5760405162461bcd60e51b81526020600482015260156024820152746e6577207363686564756c65206f7665726c61707360581b604482015260640161052c565b84606001518360088110610cde57634e487b7160e01b600052603260045260246000fd5b6020020151881785606001518460088110610d0957634e487b7160e01b600052603260045260246000fd5b6001600160e81b03199092166020928302919091015260008781526004825260409020865181558682015180518893610d4992600185019291019061150f565b5060408201516002820180546001600160a01b0319166001600160a01b039092169190911790556060820151610d859060038301906008611593565b506080918201516004909101805460ff1916911515919091179055604080518d8152602081018d9052908101869052606081018590526001600160e81b03198a16918101919091527fcae132a109c390490a273e807eb7367bb9289551d5b0493bdfd9b3ff52d7dcf89060a00160405180910390a15050505050505050505050565b33600081815260026020908152604091829020805460ff1916600117905590519182527f4028b92b6812cf0ad64ad14283561bd81eaf1d9e718a6eabcfd40016f83bd1e991015b60405180910390a1565b6000546001600160a01b03163314610e825760405162461bcd60e51b815260040161052c9061187b565b6001600160a01b03166000908152600760205260409020805460ff19166001179055565b3360009081526003602052604090205460ff16610ed55760405162461bcd60e51b815260040161052c906118b0565b6001600160a01b03821660009081526007602052604090205460ff16610f3d5760405162461bcd60e51b815260206004820152601960248201527f7468697320746f6b656e206973206e6f7420616c6c6f77656400000000000000604482015260640161052c565b6000610f5782610f516007818a60186112c2565b906112c2565b6001546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018390529192508416906323b872dd90606401602060405180830381600087803b158015610fad57600080fd5b505af1158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe591906116c1565b506001546040516304e1b7c960e51b8152336004820152602481018390526001600160a01b03858116604483015290911690639c36f92090606401600060405180830381600087803b15801561103a57600080fd5b505af115801561104e573d6000803e3d6000fd5b505050506001600160a01b038316600090815260066020908152604080832033845290915281208054839290611085908490611a2c565b9091555050600e80546001019055600061109e600e5490565b905060005b838110156110c9576110b7888888856112ce565b806110c181611ac9565b9150506110a3565b507fc805ef5cc6135113c4e86465c528816ebb074fffeb26b77c8c146ef92cf26df36110f4600c5490565b87878a8660405161110995949392919061198b565b60405180910390a150505050505050565b3360009081526002602052604090205460ff166111795760405162461bcd60e51b815260206004820152601e60248201527f546869732046656174757265206973206f6e6c7920666f722075736572730000604482015260640161052c565b33600081815260036020908152604091829020805460ff1916600117905590519182527f17e59d09e97aca8953388600495a0ba17a6c0caef6d4e7a595c1921ecaadc4559101610e4e565b6000546001600160a01b031633146111ee5760405162461bcd60e51b815260040161052c9061187b565b6001600160a01b0381166112535760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052c565b61125c8161125f565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006112bb8284611a44565b9392505050565b60006112bb8284611a58565b6112dc600c80546001019055565b60006040518060a0016040528086815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505033602080850191909152604080516101008101825284815291820184905281810184905260608083018590526080830185905260a0830185905260c0830185905260e08301859052908501919091526001930192909252600b5492935060059150611390600c5490565b81526020019081526020016000208190555080600460006113b0600c5490565b81526020808201929092526040016000208251815582820151805191926113df9260018501929091019061150f565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015161141b9060038301906008611593565b50608091909101516004909101805460ff1916911515919091179055600082815260096020526040812080549161145183611ac9565b9091555050600c54600083815260086020908152604080832060098084528285208054865291845291842094909455918590525254600c547fce395db023d011bb1b5250a05ed9da88bd09cb0513699c20609ff4816508f5eb91849187878a6040516114c2969594939291906119f3565b60405180910390a15050505050565b6040518060a00160405280600081526020016060815260200160006001600160a01b03168152602001611502611625565b8152600060209091015290565b82805461151b90611a8e565b90600052602060002090601f01602090048101928261153d5760008555611583565b82601f1061155657805160ff1916838001178555611583565b82800160010185558215611583579182015b82811115611583578251825591602001919060010190611568565b5061158f929150611644565b5090565b6001830191839082156115835791602002820160005b838211156115e957835183826101000a81548162ffffff021916908360e81c021790555092602001926003016020816002010492830192600103026115a9565b80156116185782816101000a81549062ffffff02191690556003016020816002010492830192600103026115e9565b505061158f929150611644565b6040518061010001604052806008906020820280368337509192915050565b5b8082111561158f5760008155600101611645565b80356001600160a01b038116811461167057600080fd5b919050565b600060208284031215611686578081fd5b6112bb82611659565b600080604083850312156116a1578081fd5b6116aa83611659565b91506116b860208401611659565b90509250929050565b6000602082840312156116d2578081fd5b815180151581146112bb578182fd5b6000602082840312156116f2578081fd5b5035919050565b600080600080600060808688031215611710578081fd5b85359450602086013567ffffffffffffffff8082111561172e578283fd5b818801915088601f830112611741578283fd5b81358181111561174f578384fd5b896020828501011115611760578384fd5b60208301965080955050505061177860408701611659565b949793965091946060013592915050565b6000806040838503121561179b578182fd5b50508035926020909101359150565b600080600080600060a086880312156117c1578081fd5b85359450602086013593506040860135925060608601356001600160e81b0319811681146117ed578182fd5b91506117fb60808701611659565b90509295509295909350565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452815b8181101561185557602081850181015186830182015201611839565b818111156118665782602083870101525b50601f01601f19169290920160200192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f546f206265636f6d6520612070726f766964657220796f75206e65656420746f6040820152721031329030903ab9b2b91037b3102537b6a2ab60691b606082015260800190565b600060208083528351818401528084015161018080604086015261192b6101a0860183611830565b915060018060a01b036040870151166060860152606086015160808601855b60088110156119715782516001600160e81b0319168252918501919085019060010161194a565b505050608086015180151586830152925050949350505050565b8581526080602082015260006119a5608083018688611807565b604083019490945250606001529392505050565b8481526080602082015260006119d26080830186611830565b6001600160a01b039490941660408301525090151560609091015292915050565b86815285602082015284604082015260a060608201526000611a1960a083018587611807565b9050826080830152979650505050505050565b60008219821115611a3f57611a3f611b18565b500190565b600082611a5357611a53611b2e565b500490565b6000816000190483118215151615611a7257611a72611b18565b500290565b600082821015611a8957611a89611b18565b500390565b600181811c90821680611aa257607f821691505b60208210811415611ac357634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611add57611add611b18565b5060010190565b600060ff821660ff811415611afb57611afb611b18565b60010192915050565b600082611b1357611b13611b2e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220c6a9060e6cde1b291cc5cf094efd4ab0bf7d0ffacd1c7dba16f3c7d2900dd36964736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bookStation(uint256,uint256,uint256,bytes3,address)": {
        "details": "** @note   index : index of the station ( starts from 1 day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed time : pass in bytes 24 slots ( hrs ) i.e: 0010 0001 0000 0000 => we book for hours 3 and 8 parse into hex : 0x2100 => this is the input tokenAddr : token which is used to perform the transaction , must be an approved token*"
      },
      "getBlockTimestamp()": {
        "details": "dummy call for usage in the testing*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1410,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "vault",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVault)1376"
      },
      {
        "astId": 1462,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "isMember",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1466,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "isProvider",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1471,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "stationsMap",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Station)1398_storage)"
      },
      {
        "astId": 1475,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "station_time_lower_bound",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1481,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "stakes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1485,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "isAcceptedPayment",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1491,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "ChargingPointToStation",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1495,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "StationCounterInChargingPoint",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1498,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "TIMESTAMP_PER_DAY",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1500,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "contract_time_lower_bound",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1503,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "stationIDs",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)821_storage"
      },
      {
        "astId": 1506,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "bookingIDs",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Counter)821_storage"
      },
      {
        "astId": 1509,
        "contract": "contracts/JomEV.sol:JomEV",
        "label": "ChargingPointIDs",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Counter)821_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes3)8_storage": {
        "base": "t_bytes3",
        "encoding": "inplace",
        "label": "bytes3[8]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes3": {
        "encoding": "inplace",
        "label": "bytes3",
        "numberOfBytes": "3"
      },
      "t_contract(IVault)1376": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Station)1398_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Station)",
        "numberOfBytes": "32",
        "value": "t_struct(Station)1398_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)821_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 820,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Station)1398_storage": {
        "encoding": "inplace",
        "label": "struct Station",
        "members": [
          {
            "astId": 1387,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "pricePerHour",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1389,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "location",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1391,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1395,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "availability",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes3)8_storage"
          },
          {
            "astId": 1397,
            "contract": "contracts/JomEV.sol:JomEV",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}