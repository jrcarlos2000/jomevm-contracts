{
  "language": "Solidity",
  "sources": {
    "contracts/DummyToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract DummyToken is ERC20 {\r\n    \r\n    address immutable owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol\r\n    ) ERC20(name, symbol) {\r\n        _mint(msg.sender, 1000 * 1e18);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function faucet() external {\r\n        _mint(msg.sender, 1000 * 1e18);\r\n    }\r\n\r\n    function mintToken(address receiver, uint256 amount) external{\r\n        _mint(receiver, amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Vault.sol": {
      "content": "// mint 10% JomEV token for user\r\n// Earn interest\r\n// Stake JomEV token 90%\r\n// Store all the stableCoint token in here\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\nimport \"./EVToken.sol\";\r\n\r\ncontract Vault is Ownable {\r\n    EVToken public evToken;\r\n    uint256 tokenID;\r\n\r\n    uint256 DISTRIBUTION_POINT = 100;\r\n\r\n    // referralCode for AAVE\r\n    uint16 constant referralCode = 0;\r\n    // provider address to EVToken Balance\r\n    mapping(address => uint256) public EVTokenBalance;\r\n    // provider address to tokenAddress  deposited\r\n    mapping(address => mapping(address => uint256))\r\n        public providerTokenDeposited;\r\n    // token Address to amount\r\n    mapping(address => uint256) public tokenBalance;\r\n    // tokenId to token Address\r\n    mapping(uint256 => address) public tokenAddress;\r\n    // token Address to amount deposited into AAVE\r\n    mapping(address => uint256) AAVEassetAmount;\r\n\r\n\r\n\r\n    constructor() {}\r\n\r\n    function setEVTokenAddress(address _evToken) external onlyOwner {\r\n        evToken = EVToken(_evToken);\r\n    }\r\n\r\n    function getEVTokenAddress() external view returns (address) {\r\n        return address(evToken);\r\n    }\r\n\r\n    function getEVTokenBalance(address provider)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return EVTokenBalance[provider];\r\n    }\r\n\r\n    function TransferOwner(address NewOwner) external onlyOwner {\r\n        \r\n        transferOwnership(NewOwner);\r\n    }\r\n\r\n    function mintEVToken(\r\n        address Provider,\r\n        uint256 amount_deposited,\r\n        address _tokenAddress\r\n    ) external onlyOwner {\r\n        tokenBalance[_tokenAddress] = amount_deposited;\r\n        providerTokenDeposited[Provider][_tokenAddress] = amount_deposited;\r\n        tokenAddress[tokenID] = _tokenAddress;\r\n        tokenID +=1;\r\n        // Provider get 10% EV Token, Vault get 90% of EV Token\r\n        uint256 Provider_get = (amount_deposited * 10 * DISTRIBUTION_POINT) /\r\n            100;\r\n        uint256 vault_get = (amount_deposited * 90 * DISTRIBUTION_POINT) / 100;\r\n        evToken.mintToken(Provider, Provider_get);\r\n        evToken.mintToken(address(this), vault_get);\r\n\r\n        EVTokenBalance[Provider] = Provider_get;\r\n    }\r\n\r\n    /*\r\n     * @dev get Token Balance of Vault\r\n     * @param tokenAddress: accepted token address\r\n     */\r\n    function getTokenBalance(address _tokenAddress)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        return tokenBalance[_tokenAddress];\r\n    }\r\n\r\n    function getEVTokenBalanceVault() external view returns (uint256) {\r\n        return evToken.balanceOf(address(this));\r\n    }\r\n\r\n    function invest(\r\n        address platform,\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {}\r\n\r\n     \r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/EVToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract EVToken is ERC20 {\r\n    address immutable owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\r\n        _mint(msg.sender, 1000 * 1e18);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function faucet() external {\r\n        _mint(msg.sender, 1000 * 1e18);\r\n    }\r\n\r\n    function mintToken(address receiver, uint256 amount) external {\r\n        _mint(receiver, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/JomEV.sol": {
      "content": "pragma solidity ^0.8.4;\r\n\r\nimport {Counters} from \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./IVault.sol\";\r\n\r\nstruct Station {\r\n    uint256 pricePerHour;\r\n    string location;\r\n    address owner;\r\n    bytes3[8] availability;\r\n    bool isActive;\r\n}\r\n\r\ncontract JomEV is Ownable {\r\n    using Counters for Counters.Counter;\r\n    using SafeMath for uint256;\r\n\r\n    IVault public vault;\r\n\r\n    event UserJoined(address userAddr);\r\n    event ProviderJoined(address providerAddr);\r\n    event BookingSubmited(\r\n        uint256 chargingPointIndex,\r\n        uint256 connectorIndex,\r\n        uint256 fee,\r\n        uint256 day,\r\n        bytes3 bookingSlot\r\n    );\r\n    event StationAdded(\r\n        uint256 chargingPointId,\r\n        uint256 connectorIndex,\r\n        uint256 index,\r\n        string cid,\r\n        uint256 price\r\n    );\r\n    event ChargingPointAdded(\r\n        uint256 index,\r\n        string cid,\r\n        uint256 price,\r\n        uint256 amountStaked\r\n    );\r\n    event ConnectorDesactivated(\r\n        uint256 charginPointIndex,\r\n        uint256 connectorIndex\r\n    );\r\n\r\n    mapping(address => bool) public isMember;\r\n    mapping(address => bool) public isProvider;\r\n    mapping(uint256 => Station) public stationsMap;\r\n    mapping(uint256 => uint256) public station_time_lower_bound;\r\n    mapping(address => mapping(address => uint256)) public stakes;\r\n    mapping(address => bool) public isAcceptedPayment;\r\n    mapping(uint256 => mapping(uint256 => uint256))\r\n        public ChargingPointToStation;\r\n    mapping(uint256 => uint256) public StationCounterInChargingPoint;\r\n\r\n    uint256 private TIMESTAMP_PER_DAY = 86400;\r\n    uint256 internal contract_time_lower_bound;\r\n    Counters.Counter public stationIDs;\r\n    Counters.Counter public bookingIDs;\r\n    Counters.Counter public ChargingPointIDs;\r\n\r\n    constructor() {\r\n        contract_time_lower_bound = block.timestamp;\r\n    }\r\n\r\n    modifier onlyUser() {\r\n        require(isMember[msg.sender], \"This Feature is only for users\");\r\n        _;\r\n    }\r\n    modifier onlyProvider() {\r\n        require(\r\n            isProvider[msg.sender],\r\n            \"To become a provider you need to be a user of JomEV\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setVault(address _vault) external onlyOwner {\r\n        vault = IVault(_vault);\r\n    }\r\n\r\n    //dummy function for now, we will use worldcoin to upgrade this\r\n    function joinAsUser() external {\r\n        //worldcoin verification\r\n        isMember[msg.sender] = true;\r\n        emit UserJoined(msg.sender);\r\n    }\r\n\r\n    function joinAsProvider() external onlyUser {\r\n        isProvider[msg.sender] = true;\r\n        emit ProviderJoined(msg.sender);\r\n    }\r\n\r\n    function addChargingPoint(\r\n        uint256 _pricePerHour,\r\n        string calldata cid,\r\n        address tokenAddr,\r\n        uint256 nConnectors\r\n    ) external onlyProvider {\r\n        require(isAcceptedPayment[tokenAddr], \"this token is not allowed\");\r\n        uint256 amountToTransfer = _pricePerHour.mul(24).mul(7).mul(\r\n            nConnectors\r\n        );\r\n        IERC20(tokenAddr).transferFrom(\r\n            msg.sender,\r\n            address(vault),\r\n            amountToTransfer\r\n        );\r\n        vault.mintEVToken(msg.sender, amountToTransfer, tokenAddr);\r\n        //IERC20(tokenAddr).transferFrom(msg.sender, address(this),amountToTransfer);\r\n        stakes[tokenAddr][msg.sender] += amountToTransfer;\r\n\r\n        ChargingPointIDs.increment();\r\n        uint256 currChargingPointCount = ChargingPointIDs.current();\r\n        for (uint256 i = 0; i < nConnectors; i++) {\r\n            _addStation(_pricePerHour, cid, currChargingPointCount);\r\n        }\r\n        emit ChargingPointAdded(\r\n            stationIDs.current(),\r\n            cid,\r\n            _pricePerHour,\r\n            amountToTransfer\r\n        );\r\n    }\r\n\r\n    /**\r\n    ** @dev \r\n    ** @note  \r\n        pricePerHour : price x hour of current station\r\n        location : must be passed in coordinates or other relevant way\r\n        tokenAddr : token which is used to perform the transaction , must be an approved token\r\n    **/\r\n    function _addStation(\r\n        uint256 _pricePerHour,\r\n        string calldata location,\r\n        uint256 chargingPointId\r\n    ) internal {\r\n        stationIDs.increment();\r\n        Station memory newStation = Station(\r\n            _pricePerHour,\r\n            location,\r\n            msg.sender,\r\n            [\r\n                bytes3(0),\r\n                bytes3(0),\r\n                bytes3(0),\r\n                bytes3(0),\r\n                bytes3(0),\r\n                bytes3(0),\r\n                bytes3(0),\r\n                bytes3(0)\r\n            ],\r\n            true\r\n        );\r\n        station_time_lower_bound[\r\n            stationIDs.current()\r\n        ] = contract_time_lower_bound;\r\n        stationsMap[stationIDs.current()] = newStation;\r\n        StationCounterInChargingPoint[chargingPointId]++;\r\n        ChargingPointToStation[chargingPointId][\r\n            StationCounterInChargingPoint[chargingPointId]\r\n        ] = stationIDs.current();\r\n        emit StationAdded(\r\n            chargingPointId,\r\n            StationCounterInChargingPoint[chargingPointId],\r\n            stationIDs.current(),\r\n            location,\r\n            _pricePerHour\r\n        );\r\n    }\r\n\r\n    /**\r\n    ** @dev \r\n    ** @note  \r\n        index : index of the station ( starts from 1\r\n        day : index of day starting from today. if today is 15 and we want for 16 we must write 1, 0 is not allowed\r\n        time : pass in bytes 24 slots ( hrs )\r\n                i.e: 0010 0001 0000 0000 => we book for hours 3 and 8\r\n                parse into hex : 0x2100 => this is the input\r\n        tokenAddr : token which is used to perform the transaction , must be an approved token\r\n\r\n    **/\r\n    function bookStation(\r\n        uint256 chargingPointId,\r\n        uint256 connectorIndex,\r\n        uint256 day,\r\n        bytes3 time,\r\n        address tokenAddr\r\n    ) external onlyUser {\r\n        bookingIDs.increment();\r\n        uint256 index = ChargingPointToStation[chargingPointId][connectorIndex];\r\n        require(\r\n            index <= stationIDs.current() && index > 0,\r\n            \"index for booking not allowed\"\r\n        );\r\n        require(time != bytes3(0), \"new schedule cannot be empty\");\r\n        Station memory selectedStation = stationsMap[index];\r\n        require(selectedStation.isActive, \"Current Station is not active\");\r\n\r\n        //perform payment\r\n        uint256 amountRequired = selectedStation.pricePerHour;\r\n        require(isAcceptedPayment[tokenAddr], \"this token is not accepted\");\r\n        //IERC20(tokenAddr).transferFrom(msg.sender, address(this) , amountRequired);\r\n\r\n        IERC20(tokenAddr).transferFrom(\r\n            msg.sender,\r\n            address(vault),\r\n            amountRequired\r\n        );\r\n\r\n        uint256 startPointer = day;\r\n        uint256 diff = block.timestamp - station_time_lower_bound[index];\r\n        if (diff > TIMESTAMP_PER_DAY) {\r\n            uint256 quotient = (diff).div(TIMESTAMP_PER_DAY);\r\n            uint256 n = quotient;\r\n            if (quotient >= 7) {\r\n                n = 7;\r\n                station_time_lower_bound[index] += (TIMESTAMP_PER_DAY *\r\n                    (quotient.div(7)));\r\n            }\r\n            for (uint8 i = 1; i <= n; i++) {\r\n                startPointer += 1;\r\n                selectedStation.availability[i] = bytes3(0);\r\n            }\r\n        }\r\n        startPointer = startPointer % 7;\r\n        bytes3 checkOverlap = time & selectedStation.availability[startPointer];\r\n        require(checkOverlap == bytes3(0), \"new schedule overlaps\");\r\n        selectedStation.availability[startPointer] =\r\n            time |\r\n            selectedStation.availability[startPointer];\r\n        stationsMap[index] = selectedStation;\r\n\r\n        emit BookingSubmited(\r\n            chargingPointId,\r\n            connectorIndex,\r\n            amountRequired,\r\n            startPointer,\r\n            time\r\n        );\r\n    }\r\n\r\n    function desactivateConnector(\r\n        uint256 chargingPointIndex,\r\n        uint256 connectorIndex\r\n    ) external onlyProvider {\r\n        require(\r\n            stationsMap[\r\n                ChargingPointToStation[chargingPointIndex][connectorIndex]\r\n            ].owner == msg.sender,\r\n            \"Caller is not the owner of the station\"\r\n        );\r\n        stationsMap[ChargingPointToStation[chargingPointIndex][connectorIndex]]\r\n            .isActive = false;\r\n\r\n        emit ConnectorDesactivated(chargingPointIndex, connectorIndex);\r\n    }\r\n\r\n    function addAcceptedPayment(address tokenAddr) external onlyOwner {\r\n        isAcceptedPayment[tokenAddr] = true;\r\n    }\r\n\r\n    //readers\r\n    function getStation(uint256 index)\r\n        external\r\n        view\r\n        returns (Station memory station)\r\n    {\r\n        return (stationsMap[index]);\r\n    }\r\n\r\n    /**\r\n     **  @dev dummy call for usage in the testing\r\n     **/\r\n    function getBlockTimestamp() external view returns (uint256) {\r\n        return (block.timestamp);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/IVault.sol": {
      "content": "// mint 10% JomEV token for user\r\n// Earn interest \r\n// Stake JomEV token 90%\r\n// Store all the stableCoint token in here\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ninterface IVault {\r\n\r\n    function mintEVToken(address User, uint256 amount_deposited, address tokenAddress) external;\r\n\r\n    function getTokenBalance(address tokenAddress) external  returns(uint256);\r\n\r\n    function getEVTokenBalance() external  returns(uint256);\r\n    \r\n    function invest(address platform, address tokenAddress, uint256 amount) external;\r\n\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}